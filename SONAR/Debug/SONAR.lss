
SONAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800200  0000093e  000009d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000093e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800246  00800246  00000a18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a9  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec4  00000000  00000000  000021c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089e  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00003924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000704  00000000  00000000  00003abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b6  00000000  00000000  000041c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004a76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	5a c1       	rjmp	.+692    	; 0x2ba <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	17 c1       	rjmp	.+558    	; 0x28c <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d8 c0       	rjmp	.+432    	; 0x23e <__vector_35>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e3       	ldi	r30, 0x3E	; 62
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 34       	cpi	r26, 0x46	; 70
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e4       	ldi	r26, 0x46	; 70
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 34       	cpi	r26, 0x4C	; 76
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	0c c4       	rjmp	.+2072   	; 0x93a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
int count_10us;

// Comienzo del main
int main(void)
{
	sonar_setup();
 124:	8b d1       	rcall	.+790    	; 0x43c <sonar_setup>
	lcd_setup();
 126:	43 d1       	rcall	.+646    	; 0x3ae <lcd_setup>
 128:	78 94       	sei
	//PORTB &= ~(1 << PB7);
	sei();
 12a:	c8 e8       	ldi	r28, 0x88	; 136
		//PORTE |= (1 << PE4);
		//_delay_ms(50);
		//PORTE &= ~(1 << PE4);
		//_delay_ms(50);
		
		for( OCR1A = t_0grados; OCR1A <= t_180grados; OCR1A = OCR1A + t_paso){				// Rotacion del servo, aumentando OCR1A con t_paso, cada ms_servo milisegundos
 12c:	d0 e0       	ldi	r29, 0x00	; 0
 12e:	0f 2e       	mov	r0, r31
 130:	fe e5       	ldi	r31, 0x5E	; 94
 132:	ef 2e       	mov	r14, r31
 134:	ff 24       	eor	r15, r15
 136:	f3 94       	inc	r15
 138:	f0 2d       	mov	r31, r0
 13a:	00 e6       	ldi	r16, 0x60	; 96
				//lcd_write_string(prueba);
				dist_calc(retorno_sensor, pulse_width);										// llamo a la funcion que calcula angulo y distancia, y los escribe en el display
				flag_sensor=0;																// Reseteo la flag del sensor
			}
		}
		for( OCR1A = t_180grados; OCR1A >= t_0grados; OCR1A = OCR1A - t_paso){				// Rotacion del servo en el otro sentido, decrementando OCR1A con t_paso, cada ms_servo milisegundos
 13c:	19 e0       	ldi	r17, 0x09	; 9
 13e:	f9 82       	std	Y+1, r15	; 0x01
		//PORTE |= (1 << PE4);
		//_delay_ms(50);
		//PORTE &= ~(1 << PE4);
		//_delay_ms(50);
		
		for( OCR1A = t_0grados; OCR1A <= t_180grados; OCR1A = OCR1A + t_paso){				// Rotacion del servo, aumentando OCR1A con t_paso, cada ms_servo milisegundos
 140:	e8 82       	st	Y, r14
 142:	88 81       	ld	r24, Y
 144:	99 81       	ldd	r25, Y+1	; 0x01
 146:	81 36       	cpi	r24, 0x61	; 97
 148:	99 40       	sbci	r25, 0x09	; 9
 14a:	c0 f5       	brcc	.+112    	; 0x1bc <main+0x98>
 14c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
			if (flag_sensor == 0){
 150:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <__data_end+0x1>
 154:	89 2b       	or	r24, r25
 156:	51 f4       	brne	.+20     	; 0x16c <main+0x48>
 158:	8f e7       	ldi	r24, 0x7F	; 127
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	98 e3       	ldi	r25, 0x38	; 56
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	81 50       	subi	r24, 0x01	; 1
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	20 40       	sbci	r18, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x3a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x44>
 168:	00 00       	nop
 16a:	1e c0       	rjmp	.+60     	; 0x1a8 <main+0x84>
 16c:	68 81       	ld	r22, Y
				_delay_ms(ms_servo);
				//volatile int pulse_width = OCR1A;
				//dist_calc(retorno_sensor, pulse_width);
			}else{
				int pulse_width = OCR1A;											// Si flag_sensor es 1 (es decir que ocurrio el input capture en el timer 4)
 16e:	79 81       	ldd	r23, Y+1	; 0x01
 170:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <count_10us>
				retorno_sensor = 10*count_10us;
 174:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <count_10us+0x1>
 178:	c9 01       	movw	r24, r18
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	82 0f       	add	r24, r18
 18c:	93 1f       	adc	r25, r19
 18e:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <retorno_sensor+0x1>
 192:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <retorno_sensor>
 196:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <count_10us+0x1>
				count_10us = 0;
 19a:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <count_10us>
				//char prueba[16];
				//itoa(retorno_sensor,prueba,10);
				//lcd_write_string(prueba);
				dist_calc(retorno_sensor, pulse_width);										// llamo a la funcion que calcula angulo y distancia, y los escribe en el display
 19e:	9a d1       	rcall	.+820    	; 0x4d4 <dist_calc>
 1a0:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <__data_end+0x1>
				flag_sensor=0;																// Reseteo la flag del sensor
 1a4:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <__data_end>
 1a8:	88 81       	ld	r24, Y
		//PORTE |= (1 << PE4);
		//_delay_ms(50);
		//PORTE &= ~(1 << PE4);
		//_delay_ms(50);
		
		for( OCR1A = t_0grados; OCR1A <= t_180grados; OCR1A = OCR1A + t_paso){				// Rotacion del servo, aumentando OCR1A con t_paso, cada ms_servo milisegundos
 1aa:	99 81       	ldd	r25, Y+1	; 0x01
 1ac:	05 96       	adiw	r24, 0x05	; 5
 1ae:	99 83       	std	Y+1, r25	; 0x01
 1b0:	88 83       	st	Y, r24
 1b2:	88 81       	ld	r24, Y
 1b4:	99 81       	ldd	r25, Y+1	; 0x01
 1b6:	81 36       	cpi	r24, 0x61	; 97
 1b8:	99 40       	sbci	r25, 0x09	; 9
 1ba:	40 f2       	brcs	.-112    	; 0x14c <main+0x28>
 1bc:	19 83       	std	Y+1, r17	; 0x01
				//lcd_write_string(prueba);
				dist_calc(retorno_sensor, pulse_width);										// llamo a la funcion que calcula angulo y distancia, y los escribe en el display
				flag_sensor=0;																// Reseteo la flag del sensor
			}
		}
		for( OCR1A = t_180grados; OCR1A >= t_0grados; OCR1A = OCR1A - t_paso){				// Rotacion del servo en el otro sentido, decrementando OCR1A con t_paso, cada ms_servo milisegundos
 1be:	08 83       	st	Y, r16
 1c0:	88 81       	ld	r24, Y
 1c2:	99 81       	ldd	r25, Y+1	; 0x01
 1c4:	8e 35       	cpi	r24, 0x5E	; 94
 1c6:	91 40       	sbci	r25, 0x01	; 1
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <main+0xa8>
 1ca:	b9 cf       	rjmp	.-142    	; 0x13e <main+0x1a>
 1cc:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
			if (flag_sensor == 0){
 1d0:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <__data_end+0x1>
 1d4:	89 2b       	or	r24, r25
 1d6:	51 f4       	brne	.+20     	; 0x1ec <main+0xc8>
 1d8:	8f e7       	ldi	r24, 0x7F	; 127
 1da:	98 e3       	ldi	r25, 0x38	; 56
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	81 50       	subi	r24, 0x01	; 1
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	20 40       	sbci	r18, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0xba>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0xc4>
 1e8:	00 00       	nop
 1ea:	1e c0       	rjmp	.+60     	; 0x228 <main+0x104>
 1ec:	68 81       	ld	r22, Y
				_delay_ms(ms_servo);
				//volatile int pulse_width = OCR1A;
				//dist_calc(retorno_sensor, pulse_width);							
			}else{
				int pulse_width = OCR1A;											// Se repite lo mismo que el giro en el otro sentido
 1ee:	79 81       	ldd	r23, Y+1	; 0x01
 1f0:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <count_10us>
				retorno_sensor = 10*count_10us;
 1f4:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <count_10us+0x1>
 1f8:	c9 01       	movw	r24, r18
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	22 0f       	add	r18, r18
 200:	33 1f       	adc	r19, r19
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	82 0f       	add	r24, r18
 20c:	93 1f       	adc	r25, r19
 20e:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <retorno_sensor+0x1>
 212:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <retorno_sensor>
 216:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <count_10us+0x1>
				count_10us = 0;
 21a:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <count_10us>
				//char prueba[16];
				//itoa(retorno_sensor,prueba,10);
				//lcd_write_string(prueba);
				dist_calc(retorno_sensor, pulse_width);
 21e:	5a d1       	rcall	.+692    	; 0x4d4 <dist_calc>
 220:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <__data_end+0x1>
				flag_sensor=0;
 224:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <__data_end>
 228:	88 81       	ld	r24, Y
				//lcd_write_string(prueba);
				dist_calc(retorno_sensor, pulse_width);										// llamo a la funcion que calcula angulo y distancia, y los escribe en el display
				flag_sensor=0;																// Reseteo la flag del sensor
			}
		}
		for( OCR1A = t_180grados; OCR1A >= t_0grados; OCR1A = OCR1A - t_paso){				// Rotacion del servo en el otro sentido, decrementando OCR1A con t_paso, cada ms_servo milisegundos
 22a:	99 81       	ldd	r25, Y+1	; 0x01
 22c:	05 97       	sbiw	r24, 0x05	; 5
 22e:	99 83       	std	Y+1, r25	; 0x01
 230:	88 83       	st	Y, r24
 232:	88 81       	ld	r24, Y
 234:	99 81       	ldd	r25, Y+1	; 0x01
 236:	8e 35       	cpi	r24, 0x5E	; 94
 238:	91 40       	sbci	r25, 0x01	; 1
 23a:	40 f6       	brcc	.-112    	; 0x1cc <main+0xa8>
 23c:	80 cf       	rjmp	.-256    	; 0x13e <main+0x1a>

0000023e <__vector_35>:
 23e:	1f 92       	push	r1
  Nombre:	TIMER3_OVF_vect
  Fuente:	Flag de overflow del timer 3	
  Propósito:	Mandar un nuevo pulso al sensor luego de pasar un cierto tiempo (200 ms en este caso)
*/

ISR(TIMER3_OVF_vect){					// Vector de interrupcion del overflow del timer 3
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	0b b6       	in	r0, 0x3b	; 59
 24a:	0f 92       	push	r0
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	trigger_pulse();
 264:	f3 d1       	rcall	.+998    	; 0x64c <trigger_pulse>
}
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	7f 91       	pop	r23
 274:	6f 91       	pop	r22
 276:	5f 91       	pop	r21
 278:	4f 91       	pop	r20
 27a:	3f 91       	pop	r19
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0b be       	out	0x3b, r0	; 59
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <__vector_23>:
	TCNT4 = 0;
}
*/


ISR(TIMER0_OVF_vect){
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
	count_10us++;
 29a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <count_10us>
 29e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <count_10us+0x1>
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <count_10us+0x1>
 2a8:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <count_10us>
}
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <__vector_1>:

ISR(INT0_vect){
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
	if ((PIND & (1 << PIND0)) == (1 << PIND0)){
 2c8:	48 9b       	sbis	0x09, 0	; 9
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <__vector_1+0x1c>
		TCCR0B |= (1 << CS00);
 2cc:	85 b5       	in	r24, 0x25	; 37
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	85 bd       	out	0x25, r24	; 37
		PORTB |= (1 << PB7);
 2d2:	2f 9a       	sbi	0x05, 7	; 5
 2d4:	0a c0       	rjmp	.+20     	; 0x2ea <__vector_1+0x30>
	}else{
		TCCR0B &= ~(1 << CS00);
 2d6:	85 b5       	in	r24, 0x25	; 37
 2d8:	8e 7f       	andi	r24, 0xFE	; 254
 2da:	85 bd       	out	0x25, r24	; 37
		flag_sensor = 1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <__data_end+0x1>
 2e4:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
		PORTB &= ~(1 << PB7);
 2e8:	2f 98       	cbi	0x05, 7	; 5
	}
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <lcd_write>:
  Inputs:     "info" es la información a enviar al registro del LCD.
  Outputs:    Ninguno.
*/
void lcd_write(uint8_t info)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // Asumo que el dato es '0'.
 2f8:	17 98       	cbi	0x02, 7	; 2
    if (info & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);        // Fuerzo que el dato sea '1' si es necesario.
 2fa:	88 23       	and	r24, r24
 2fc:	0c f4       	brge	.+2      	; 0x300 <lcd_write+0x8>
 2fe:	17 9a       	sbi	0x02, 7	; 2

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // Repito para todos los otros bits.
 300:	16 98       	cbi	0x02, 6	; 2
    if (info & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
 302:	86 fd       	sbrc	r24, 6
 304:	16 9a       	sbi	0x02, 6	; 2

    lcd_D5_port &= ~(1<<lcd_D5_bit);
 306:	15 98       	cbi	0x02, 5	; 2
    if (info & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
 308:	85 fd       	sbrc	r24, 5
 30a:	15 9a       	sbi	0x02, 5	; 2

    lcd_D4_port &= ~(1<<lcd_D4_bit);
 30c:	14 98       	cbi	0x02, 4	; 2
    if (info & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
 30e:	84 fd       	sbrc	r24, 4
 310:	14 9a       	sbi	0x02, 4	; 2

    lcd_D3_port &= ~(1<<lcd_D3_bit);
 312:	13 98       	cbi	0x02, 3	; 2
    if (info & 1<<3) lcd_D3_port |= (1<<lcd_D3_bit);
 314:	83 fd       	sbrc	r24, 3
 316:	13 9a       	sbi	0x02, 3	; 2

    lcd_D2_port &= ~(1<<lcd_D2_bit);
 318:	12 98       	cbi	0x02, 2	; 2
    if (info & 1<<2) lcd_D2_port |= (1<<lcd_D2_bit);
 31a:	82 fd       	sbrc	r24, 2
 31c:	12 9a       	sbi	0x02, 2	; 2

    lcd_D1_port &= ~(1<<lcd_D1_bit);
 31e:	11 98       	cbi	0x02, 1	; 2
    if (info & 1<<1) lcd_D1_port |= (1<<lcd_D1_bit);
 320:	81 fd       	sbrc	r24, 1
 322:	11 9a       	sbi	0x02, 1	; 2

    lcd_D0_port &= ~(1<<lcd_D0_bit);
 324:	10 98       	cbi	0x02, 0	; 2
    if (info & 1<<0) lcd_D0_port |= (1<<lcd_D0_bit);
 326:	80 fd       	sbrc	r24, 0
 328:	10 9a       	sbi	0x02, 0	; 2

// Escribo los datos.
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
 32a:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32c:	85 e0       	ldi	r24, 0x05	; 5
 32e:	8a 95       	dec	r24
 330:	f1 f7       	brne	.-4      	; 0x32e <lcd_write+0x36>
 332:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
 334:	29 98       	cbi	0x05, 1	; 5
 336:	85 e0       	ldi	r24, 0x05	; 5
 338:	8a 95       	dec	r24
 33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_write+0x40>
 33c:	00 00       	nop
 33e:	08 95       	ret

00000340 <lcd_write_char>:
  Outputs:    Ninguno.
*/

void lcd_write_char(uint8_t datos)
{
    lcd_RS_port |= (1<<lcd_RS_bit);                 // Selecciono el registro de datos.
 340:	28 9a       	sbi	0x05, 0	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Me aseguro que E esté en bajo.
 342:	29 98       	cbi	0x05, 1	; 5
    lcd_write(datos);                             // Escribo los datos.
 344:	d9 cf       	rjmp	.-78     	; 0x2f8 <lcd_write>
 346:	08 95       	ret

00000348 <lcd_write_string>:
  Inputs:     "texto" es el string que se representará en el display.
  Outputs:    Ninguno.
*/

void lcd_write_string(uint8_t texto[])
{
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	1f 92       	push	r1
 352:	1f 92       	push	r1
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	8c 01       	movw	r16, r24
    volatile int i = 0;                             
 35a:	1a 82       	std	Y+2, r1	; 0x02
 35c:	19 82       	std	Y+1, r1	; 0x01
    while (texto[i] != 0)
 35e:	e9 81       	ldd	r30, Y+1	; 0x01
 360:	fa 81       	ldd	r31, Y+2	; 0x02
 362:	e8 0f       	add	r30, r24
 364:	f9 1f       	adc	r31, r25
 366:	80 81       	ld	r24, Z
 368:	88 23       	and	r24, r24
 36a:	b1 f0       	breq	.+44     	; 0x398 <lcd_write_string+0x50>
    {
        lcd_write_char(texto[i]);
 36c:	e9 81       	ldd	r30, Y+1	; 0x01
 36e:	fa 81       	ldd	r31, Y+2	; 0x02
 370:	e0 0f       	add	r30, r16
 372:	f1 1f       	adc	r31, r17
 374:	80 81       	ld	r24, Z
 376:	e4 df       	rcall	.-56     	; 0x340 <lcd_write_char>
        i++;
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	9a 81       	ldd	r25, Y+2	; 0x02
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	9a 83       	std	Y+2, r25	; 0x02
 380:	89 83       	std	Y+1, r24	; 0x01
 382:	85 ed       	ldi	r24, 0xD5	; 213
 384:	8a 95       	dec	r24
 386:	f1 f7       	brne	.-4      	; 0x384 <lcd_write_string+0x3c>
 388:	00 00       	nop
*/

void lcd_write_string(uint8_t texto[])
{
    volatile int i = 0;                             
    while (texto[i] != 0)
 38a:	e9 81       	ldd	r30, Y+1	; 0x01
 38c:	fa 81       	ldd	r31, Y+2	; 0x02
 38e:	e0 0f       	add	r30, r16
 390:	f1 1f       	adc	r31, r17
 392:	80 81       	ld	r24, Z
 394:	81 11       	cpse	r24, r1
 396:	ea cf       	rjmp	.-44     	; 0x36c <lcd_write_string+0x24>
    {
        lcd_write_char(texto[i]);
        i++;
        _delay_us(40);                              // Delay de 40us.
    }
}
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	08 95       	ret

000003a6 <lcd_write_instr>:
  Outputs:    Ninguno.
*/

void lcd_write_instr(uint8_t instrucciones)
{
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // Selecciono el registro de instrucciones.
 3a6:	28 98       	cbi	0x05, 0	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Me aseguro que E esté en bajo.
 3a8:	29 98       	cbi	0x05, 1	; 5
    lcd_write(instrucciones);                     // Escribo las instrucciones.
 3aa:	a6 cf       	rjmp	.-180    	; 0x2f8 <lcd_write>
 3ac:	08 95       	ret

000003ae <lcd_setup>:
  Outputs:    Ninguno.
*/

void lcd_setup(void)
{
	DDRA = 0xFF;						// Seteo el PortA de D0:D7 como salida
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	81 b9       	out	0x01, r24	; 1
	DDRB |= (1 << PB0) | (1 << PB1);	// Seteo Enable y RS como salida
 3b2:	84 b1       	in	r24, 0x04	; 4
 3b4:	83 60       	ori	r24, 0x03	; 3
 3b6:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	83 ef       	ldi	r24, 0xF3	; 243
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <lcd_setup+0x10>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <lcd_setup+0x1a>
 3c8:	00 00       	nop
	
// Delay de encendido.
    _delay_ms(40);                                 // 40ms.

// Reset del controlador del display LCD.
    lcd_write_instr(lcd_reset);    // Primera parte de la secuencia de reset.
 3ca:	80 e3       	ldi	r24, 0x30	; 48
 3cc:	ec df       	rcall	.-40     	; 0x3a6 <lcd_write_instr>
 3ce:	8f e7       	ldi	r24, 0x7F	; 127
 3d0:	9e e3       	ldi	r25, 0x3E	; 62
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <lcd_setup+0x24>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <lcd_setup+0x2a>
 3d8:	00 00       	nop
    _delay_ms(4);                                  // Delay de 4.1ms.

    lcd_write_instr(lcd_reset);    // Segunda parte de la secuencia de reset.
 3da:	80 e3       	ldi	r24, 0x30	; 48
 3dc:	e4 df       	rcall	.-56     	; 0x3a6 <lcd_write_instr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3de:	8f e8       	ldi	r24, 0x8F	; 143
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <lcd_setup+0x34>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <lcd_setup+0x3a>
    _delay_us(100);                                 // Delay de 100us.

    lcd_write_instr(lcd_reset);    // Tercera parte de la secuencia de reset.
 3e8:	00 00       	nop
 3ea:	80 e3       	ldi	r24, 0x30	; 48
 3ec:	dc df       	rcall	.-72     	; 0x3a6 <lcd_write_instr>
 3ee:	8f e8       	ldi	r24, 0x8F	; 143
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <lcd_setup+0x44>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <lcd_setup+0x4a>
    _delay_us(100);                                

// Configuración del display LED.
    lcd_write_instr(lcd_set);    // Seteo el modo, la cantidad de líneas y font.
 3f8:	00 00       	nop
 3fa:	88 e3       	ldi	r24, 0x38	; 56
 3fc:	d4 df       	rcall	.-88     	; 0x3a6 <lcd_write_instr>
 3fe:	95 ed       	ldi	r25, 0xD5	; 213
 400:	9a 95       	dec	r25
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
    _delay_us(40);                                  // Delay de 40us.

// Rutina de inicialización (chequear después).

    lcd_write_instr(lcd_off);       // Apago el display.
 404:	00 00       	nop
 406:	88 e0       	ldi	r24, 0x08	; 8
 408:	ce df       	rcall	.-100    	; 0x3a6 <lcd_write_instr>
 40a:	25 ed       	ldi	r18, 0xD5	; 213
 40c:	2a 95       	dec	r18
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
    _delay_us(40);                                  // Delay de 40us.

    lcd_write_instr(lcd_clear);            // Limpio la RAM del display.
 410:	00 00       	nop
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	c8 df       	rcall	.-112    	; 0x3a6 <lcd_write_instr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 416:	8f e3       	ldi	r24, 0x3F	; 63
 418:	9f e1       	ldi	r25, 0x1F	; 31
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
    _delay_ms(2);                                   // Delay de 1.64ms.

    lcd_write_instr(lcd_entrymode);        // Seteo el comportamiento del cursor.
 420:	00 00       	nop
 422:	86 e0       	ldi	r24, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 424:	c0 df       	rcall	.-128    	; 0x3a6 <lcd_write_instr>
 426:	95 ed       	ldi	r25, 0xD5	; 213
 428:	9a 95       	dec	r25
 42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
    _delay_us(40);                                  // Delay de 40us.

    lcd_write_instr(lcd_on);        // Prendo el display.
 42c:	00 00       	nop
 42e:	8c e0       	ldi	r24, 0x0C	; 12
 430:	ba df       	rcall	.-140    	; 0x3a6 <lcd_write_instr>
 432:	25 ed       	ldi	r18, 0xD5	; 213
 434:	2a 95       	dec	r18
 436:	f1 f7       	brne	.-4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 438:	00 00       	nop
 43a:	08 95       	ret

0000043c <sonar_setup>:
*/

void sonar_setup(void){
	
	// Timer 1 para la onda PWM PFC del servo
	TCCR1A |= (1 << COM1A1);						// Limpio OC1A para upcounting en compare match y seteo 0C1A para downcounting en compare match
 43c:	e0 e8       	ldi	r30, 0x80	; 128
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	80 68       	ori	r24, 0x80	; 128
 444:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << CS11);			// WGM1 3:0 (bits 3 y 2 en TCCR1B y 1 y 0 en TCCR1A) en 0b1000 para modo PFCPWM con TOP = ICR1, y prescaler en 8
 446:	e1 e8       	ldi	r30, 0x81	; 129
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	82 61       	ori	r24, 0x12	; 18
 44e:	80 83       	st	Z, r24
	DDRB |= (1 << DDB5);							// Port B5 (Pin 11, OC1A) como salida
 450:	25 9a       	sbi	0x04, 5	; 4
	ICR1 = 20000;									// 20 ms de periodo PWM
 452:	80 e2       	ldi	r24, 0x20	; 32
 454:	9e e4       	ldi	r25, 0x4E	; 78
 456:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 45a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	
	// Timer 3 para contar tiempo entre pulsos
	TCCR3A |= (1 << WGM31);													// Modo fast PWM con overflow en el valor de ICR3
 45e:	e0 e9       	ldi	r30, 0x90	; 144
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	82 60       	ori	r24, 0x02	; 2
 466:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM33) | (1 << WGM32) | (1 << CS31) | (1 << CS30);		// 64 de prescaler
 468:	e1 e9       	ldi	r30, 0x91	; 145
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	8b 61       	ori	r24, 0x1B	; 27
 470:	80 83       	st	Z, r24
	TIMSK3 |= (1 << TOIE3);													// Activo el interrupt por overflow
 472:	e1 e7       	ldi	r30, 0x71	; 113
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	80 83       	st	Z, r24
	ICR3 = 50000;															// Seteo el TOP para que el overflow se de a los 200 ms
 47c:	80 e5       	ldi	r24, 0x50	; 80
 47e:	93 ec       	ldi	r25, 0xC3	; 195
 480:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 484:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
	
	// Timer 4 para medir el tiempo entre el pulso de salida y el que devuelve el sensor
	//TCCR4B |= (1 << ICNC4) | (1 << ICES4);										// Seteo que la interrupción se dé en flanco de subida y un prescaler de 8.
	//TIMSK4 |= (1 << ICIE4);
	DDRL |= (1 << PL1);															// Seteo el PortL 1 como salida para el pulso del sensor (Pin 48) y el 0 como entrada para el echo (Pin 49)
 488:	ea e0       	ldi	r30, 0x0A	; 10
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	80 81       	ld	r24, Z
 48e:	82 60       	ori	r24, 0x02	; 2
 490:	80 83       	st	Z, r24
	
	// Timer 0 para contar tiempo entre pulsos									// Seteo el timer 0 de 8 bits para contar intervalos de 10 us	
	TCCR0A |= (1 << WGM01) | (1 << WGM00);										// para medir el tiempo del sensor
 492:	84 b5       	in	r24, 0x24	; 36
 494:	83 60       	ori	r24, 0x03	; 3
 496:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << WGM02);// | (1 << CS00);
 498:	85 b5       	in	r24, 0x25	; 37
 49a:	88 60       	ori	r24, 0x08	; 8
 49c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE3);
 49e:	ee e6       	ldi	r30, 0x6E	; 110
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	81 60       	ori	r24, 0x01	; 1
 4a6:	80 83       	st	Z, r24
	OCR0A = 160;
 4a8:	80 ea       	ldi	r24, 0xA0	; 160
 4aa:	87 bd       	out	0x27, r24	; 39
	
	//Seteo el interrupt de INT0 (Port D0, Pin 21)											
	EICRA |= (1 << ISC00);														// Interrupt en cualquier flanco
 4ac:	e9 e6       	ldi	r30, 0x69	; 105
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	81 60       	ori	r24, 0x01	; 1
 4b4:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);														// Activo el interrupt externo
 4b6:	e8 9a       	sbi	0x1d, 0	; 29
	
	// Modos de bajo consumo (PRR0 y PRR1)
	PRR0 |= (1 << PRTWI) | (1 << PRSPI) | (1 << PRUSART0) | (1 << PRADC);		// Desactivo TWI (Two wire interface), SPI, el ADC y los USART
 4b8:	e4 e6       	ldi	r30, 0x64	; 100
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	87 68       	ori	r24, 0x87	; 135
 4c0:	80 83       	st	Z, r24
	PRR1 |= (1 << PRUSART3) | (1 << PRUSART2) | (1 << PRUSART1);
 4c2:	e5 e6       	ldi	r30, 0x65	; 101
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	87 60       	ori	r24, 0x07	; 7
 4ca:	80 83       	st	Z, r24
	
	DDRD &= ~(1 << PD0);
 4cc:	50 98       	cbi	0x0a, 0	; 10
	DDRE |= (1 << PE4);								//
 4ce:	6c 9a       	sbi	0x0d, 4	; 13
	DDRB |= (1 << PB7);
 4d0:	27 9a       	sbi	0x04, 7	; 4
 4d2:	08 95       	ret

000004d4 <dist_calc>:
  Inputs:     tiempo_us, el valor del contador del timer 4 entre que se manda el pulso y el sensor devuelve
			  pulse_width, el valor de OCR1A que determina el ancho de pulso para el angulo del servo
  Outputs:    Ninguno.
*/

void dist_calc(unsigned int tiempo_us, unsigned int pulse_width){
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	e6 97       	sbiw	r28, 0x36	; 54
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
 4f0:	ab 01       	movw	r20, r22
	unsigned int dist_cm;												// Una cuenta de 2 equivale a 1 us con 8 de prescaler. La cuenta para la distancia en cm es t_us/58 = dist_cm  ==>  count/(2*58) = dist_cm.
	dist_cm = tiempo_us/(116);
 4f2:	9c 01       	movw	r18, r24
 4f4:	af e9       	ldi	r26, 0x9F	; 159
 4f6:	b6 e4       	ldi	r27, 0x46	; 70
 4f8:	d3 d1       	rcall	.+934    	; 0x8a0 <__umulhisi3>
 4fa:	7c 01       	movw	r14, r24
 4fc:	f6 94       	lsr	r15
 4fe:	e7 94       	ror	r14
 500:	f6 94       	lsr	r15
 502:	e7 94       	ror	r14
 504:	f6 94       	lsr	r15
 506:	e7 94       	ror	r14
 508:	f6 94       	lsr	r15
 50a:	e7 94       	ror	r14
 50c:	f6 94       	lsr	r15
 50e:	e7 94       	ror	r14
	unsigned int angulo = (pulse_width - (t_0grados))*0.088;			// Obtengo el angulo (lo paso a int es vez de usar floor(), para no usar math.h)
	char string_angulo[16] = "Angulo  ";
 510:	89 e0       	ldi	r24, 0x09	; 9
 512:	e0 e0       	ldi	r30, 0x00	; 0
 514:	f2 e0       	ldi	r31, 0x02	; 2
 516:	8e 01       	movw	r16, r28
 518:	0f 5f       	subi	r16, 0xFF	; 255
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
 51c:	d8 01       	movw	r26, r16
 51e:	01 90       	ld	r0, Z+
 520:	0d 92       	st	X+, r0
 522:	8a 95       	dec	r24
 524:	e1 f7       	brne	.-8      	; 0x51e <dist_calc+0x4a>
 526:	fe 01       	movw	r30, r28
 528:	3a 96       	adiw	r30, 0x0a	; 10
 52a:	87 e0       	ldi	r24, 0x07	; 7
 52c:	df 01       	movw	r26, r30
 52e:	1d 92       	st	X+, r1
 530:	8a 95       	dec	r24
 532:	e9 f7       	brne	.-6      	; 0x52e <dist_calc+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 534:	ba 01       	movw	r22, r20
 536:	6e 55       	subi	r22, 0x5E	; 94
 538:	71 40       	sbci	r23, 0x01	; 1
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	bf d0       	rcall	.+382    	; 0x6be <__floatunsisf>
 540:	28 e5       	ldi	r18, 0x58	; 88
 542:	39 e3       	ldi	r19, 0x39	; 57
 544:	44 eb       	ldi	r20, 0xB4	; 180
 546:	5d e3       	ldi	r21, 0x3D	; 61
 548:	20 d1       	rcall	.+576    	; 0x78a <__mulsf3>
 54a:	8d d0       	rcall	.+282    	; 0x666 <__fixunssfsi>
 54c:	dc 01       	movw	r26, r24
 54e:	cb 01       	movw	r24, r22
 550:	4a e0       	ldi	r20, 0x0A	; 10
 552:	be 01       	movw	r22, r28
 554:	6f 5e       	subi	r22, 0xEF	; 239
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	bd d1       	rcall	.+890    	; 0x8d4 <__itoa_ncheck>
	char angulo_char[3];
	strcat(string_angulo,itoa(angulo,angulo_char,10));
 55a:	bc 01       	movw	r22, r24
 55c:	c8 01       	movw	r24, r16
 55e:	af d1       	rcall	.+862    	; 0x8be <strcat>
 560:	d8 01       	movw	r26, r16
	strcat(string_angulo," deg  ");										// Se agregan 2 espacios para que no quede escrita una g al final una vez que se achica la contidad de cifras (100 grados a 99 grados)
 562:	0d 90       	ld	r0, X+
 564:	00 20       	and	r0, r0
 566:	e9 f7       	brne	.-6      	; 0x562 <dist_calc+0x8e>
 568:	11 97       	sbiw	r26, 0x01	; 1
 56a:	87 e0       	ldi	r24, 0x07	; 7
 56c:	e0 e3       	ldi	r30, 0x30	; 48
 56e:	f2 e0       	ldi	r31, 0x02	; 2
 570:	01 90       	ld	r0, Z+
 572:	0d 92       	st	X+, r0
 574:	8a 95       	dec	r24
 576:	e1 f7       	brne	.-8      	; 0x570 <dist_calc+0x9c>
	lcd_write_string(string_angulo);									// Escribo el angulo en el display
 578:	c8 01       	movw	r24, r16
 57a:	e6 de       	rcall	.-564    	; 0x348 <lcd_write_string>
 57c:	87 e0       	ldi	r24, 0x07	; 7
	char string_dist1[16] = "Dist. ";									// Defino el string que contiene la palabra Dist.
 57e:	e0 e1       	ldi	r30, 0x10	; 16
 580:	f2 e0       	ldi	r31, 0x02	; 2
 582:	de 01       	movw	r26, r28
 584:	54 96       	adiw	r26, 0x14	; 20
 586:	01 90       	ld	r0, Z+
 588:	0d 92       	st	X+, r0
 58a:	8a 95       	dec	r24
 58c:	e1 f7       	brne	.-8      	; 0x586 <dist_calc+0xb2>
 58e:	fe 01       	movw	r30, r28
 590:	7b 96       	adiw	r30, 0x1b	; 27
 592:	89 e0       	ldi	r24, 0x09	; 9
 594:	df 01       	movw	r26, r30
 596:	1d 92       	st	X+, r1
 598:	8a 95       	dec	r24
 59a:	e9 f7       	brne	.-6      	; 0x596 <dist_calc+0xc2>
 59c:	88 e0       	ldi	r24, 0x08	; 8
	char string_dist2[16] = "DDist. ";									// Se define otro con DDist, porque por alguna razon, cuando dist_cm > 50, se escribe ist. en vez de Dist.
 59e:	e0 e2       	ldi	r30, 0x20	; 32
 5a0:	f2 e0       	ldi	r31, 0x02	; 2
 5a2:	de 01       	movw	r26, r28
 5a4:	94 96       	adiw	r26, 0x24	; 36
 5a6:	01 90       	ld	r0, Z+
 5a8:	0d 92       	st	X+, r0
 5aa:	8a 95       	dec	r24
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <dist_calc+0xd2>
 5ae:	fe 01       	movw	r30, r28
 5b0:	bc 96       	adiw	r30, 0x2c	; 44
 5b2:	88 e0       	ldi	r24, 0x08	; 8
 5b4:	df 01       	movw	r26, r30
 5b6:	1d 92       	st	X+, r1
 5b8:	8a 95       	dec	r24
 5ba:	e9 f7       	brne	.-6      	; 0x5b6 <dist_calc+0xe2>
	lcd_write_instr(lcd_set_cursor | lcd_line_two);						// Muevo el cursor a la segunda línea.
 5bc:	80 ec       	ldi	r24, 0xC0	; 192
 5be:	f3 de       	rcall	.-538    	; 0x3a6 <lcd_write_instr>
 5c0:	b8 e2       	ldi	r27, 0x28	; 40
	
	if(dist_cm < 40) {													// Si el objeto se encuentra a una distancia aceptable...
 5c2:	eb 16       	cp	r14, r27
 5c4:	f1 04       	cpc	r15, r1
 5c6:	20 f5       	brcc	.+72     	; 0x610 <dist_calc+0x13c>
 5c8:	0d 5e       	subi	r16, 0xED	; 237
		char dist_char[3];
		strcat(string_dist1,"  ");
 5ca:	1f 4f       	sbci	r17, 0xFF	; 255
 5cc:	f8 01       	movw	r30, r16
 5ce:	01 90       	ld	r0, Z+
 5d0:	00 20       	and	r0, r0
 5d2:	e9 f7       	brne	.-6      	; 0x5ce <dist_calc+0xfa>
 5d4:	31 97       	sbiw	r30, 0x01	; 1
 5d6:	80 e2       	ldi	r24, 0x20	; 32
 5d8:	90 e2       	ldi	r25, 0x20	; 32
 5da:	91 83       	std	Z+1, r25	; 0x01
 5dc:	80 83       	st	Z, r24
 5de:	12 82       	std	Z+2, r1	; 0x02
 5e0:	4a e0       	ldi	r20, 0x0A	; 10
 5e2:	be 01       	movw	r22, r28
 5e4:	6c 5c       	subi	r22, 0xCC	; 204
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	c7 01       	movw	r24, r14
 5ea:	74 d1       	rcall	.+744    	; 0x8d4 <__itoa_ncheck>
		strcat(string_dist1,itoa(dist_cm,dist_char,10));
 5ec:	bc 01       	movw	r22, r24
 5ee:	c8 01       	movw	r24, r16
 5f0:	66 d1       	rcall	.+716    	; 0x8be <strcat>
 5f2:	d8 01       	movw	r26, r16
		strcat(string_dist1," cm  ");
 5f4:	0d 90       	ld	r0, X+
 5f6:	00 20       	and	r0, r0
 5f8:	e9 f7       	brne	.-6      	; 0x5f4 <dist_calc+0x120>
 5fa:	11 97       	sbiw	r26, 0x01	; 1
 5fc:	86 e0       	ldi	r24, 0x06	; 6
 5fe:	e7 e3       	ldi	r30, 0x37	; 55
 600:	f2 e0       	ldi	r31, 0x02	; 2
 602:	01 90       	ld	r0, Z+
 604:	0d 92       	st	X+, r0
 606:	8a 95       	dec	r24
 608:	e1 f7       	brne	.-8      	; 0x602 <dist_calc+0x12e>
		lcd_write_string(string_dist1);									// Escribo la distancia.
 60a:	c8 01       	movw	r24, r16
 60c:	9d de       	rcall	.-710    	; 0x348 <lcd_write_string>
 60e:	0f c0       	rjmp	.+30     	; 0x62e <dist_calc+0x15a>
 610:	ce 01       	movw	r24, r28
	}else{
		strcat(string_dist2,"> 40 cm");
 612:	84 96       	adiw	r24, 0x24	; 36
 614:	dc 01       	movw	r26, r24
 616:	0d 90       	ld	r0, X+
 618:	00 20       	and	r0, r0
 61a:	e9 f7       	brne	.-6      	; 0x616 <dist_calc+0x142>
 61c:	11 97       	sbiw	r26, 0x01	; 1
 61e:	28 e0       	ldi	r18, 0x08	; 8
 620:	ed e3       	ldi	r30, 0x3D	; 61
 622:	f2 e0       	ldi	r31, 0x02	; 2
 624:	01 90       	ld	r0, Z+
 626:	0d 92       	st	X+, r0
 628:	2a 95       	dec	r18
		lcd_write_string(string_dist2);									// Escribo la distancia.
 62a:	e1 f7       	brne	.-8      	; 0x624 <dist_calc+0x150>
 62c:	8d de       	rcall	.-742    	; 0x348 <lcd_write_string>
	}
	lcd_write_instr(lcd_home);							// Vuelvo al principio de la primera linea
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	ba de       	rcall	.-652    	; 0x3a6 <lcd_write_instr>
 632:	e6 96       	adiw	r28, 0x36	; 54
}
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	f8 94       	cli
 638:	de bf       	out	0x3e, r29	; 62
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	cd bf       	out	0x3d, r28	; 61
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	08 95       	ret

0000064c <trigger_pulse>:
 64c:	eb e0       	ldi	r30, 0x0B	; 11
*/

void trigger_pulse(void){
	//TCCR4B |= (1<<CS41);				// Comienzo el conteo con prescaler en 8.
	
	PORTL |= (1 << PL1);				// Envio el pulso de 10us al sensor.
 64e:	f1 e0       	ldi	r31, 0x01	; 1
 650:	80 81       	ld	r24, Z
 652:	82 60       	ori	r24, 0x02	; 2
 654:	80 83       	st	Z, r24
 656:	85 e3       	ldi	r24, 0x35	; 53
 658:	8a 95       	dec	r24
 65a:	f1 f7       	brne	.-4      	; 0x658 <trigger_pulse+0xc>
 65c:	00 00       	nop
	_delay_us(10);
	PORTL &= ~(1 << PL1);
 65e:	80 81       	ld	r24, Z
 660:	8d 7f       	andi	r24, 0xFD	; 253
 662:	80 83       	st	Z, r24
 664:	08 95       	ret

00000666 <__fixunssfsi>:
 666:	70 d0       	rcall	.+224    	; 0x748 <__fp_splitA>
 668:	88 f0       	brcs	.+34     	; 0x68c <__fixunssfsi+0x26>
 66a:	9f 57       	subi	r25, 0x7F	; 127
 66c:	90 f0       	brcs	.+36     	; 0x692 <__fixunssfsi+0x2c>
 66e:	b9 2f       	mov	r27, r25
 670:	99 27       	eor	r25, r25
 672:	b7 51       	subi	r27, 0x17	; 23
 674:	a0 f0       	brcs	.+40     	; 0x69e <__fixunssfsi+0x38>
 676:	d1 f0       	breq	.+52     	; 0x6ac <__fixunssfsi+0x46>
 678:	66 0f       	add	r22, r22
 67a:	77 1f       	adc	r23, r23
 67c:	88 1f       	adc	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	1a f0       	brmi	.+6      	; 0x688 <__fixunssfsi+0x22>
 682:	ba 95       	dec	r27
 684:	c9 f7       	brne	.-14     	; 0x678 <__fixunssfsi+0x12>
 686:	12 c0       	rjmp	.+36     	; 0x6ac <__fixunssfsi+0x46>
 688:	b1 30       	cpi	r27, 0x01	; 1
 68a:	81 f0       	breq	.+32     	; 0x6ac <__fixunssfsi+0x46>
 68c:	77 d0       	rcall	.+238    	; 0x77c <__fp_zero>
 68e:	b1 e0       	ldi	r27, 0x01	; 1
 690:	08 95       	ret
 692:	74 c0       	rjmp	.+232    	; 0x77c <__fp_zero>
 694:	67 2f       	mov	r22, r23
 696:	78 2f       	mov	r23, r24
 698:	88 27       	eor	r24, r24
 69a:	b8 5f       	subi	r27, 0xF8	; 248
 69c:	39 f0       	breq	.+14     	; 0x6ac <__fixunssfsi+0x46>
 69e:	b9 3f       	cpi	r27, 0xF9	; 249
 6a0:	cc f3       	brlt	.-14     	; 0x694 <__fixunssfsi+0x2e>
 6a2:	86 95       	lsr	r24
 6a4:	77 95       	ror	r23
 6a6:	67 95       	ror	r22
 6a8:	b3 95       	inc	r27
 6aa:	d9 f7       	brne	.-10     	; 0x6a2 <__fixunssfsi+0x3c>
 6ac:	3e f4       	brtc	.+14     	; 0x6bc <__fixunssfsi+0x56>
 6ae:	90 95       	com	r25
 6b0:	80 95       	com	r24
 6b2:	70 95       	com	r23
 6b4:	61 95       	neg	r22
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255
 6b8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ba:	9f 4f       	sbci	r25, 0xFF	; 255
 6bc:	08 95       	ret

000006be <__floatunsisf>:
 6be:	e8 94       	clt
 6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <__floatsisf+0x12>

000006c2 <__floatsisf>:
 6c2:	97 fb       	bst	r25, 7
 6c4:	3e f4       	brtc	.+14     	; 0x6d4 <__floatsisf+0x12>
 6c6:	90 95       	com	r25
 6c8:	80 95       	com	r24
 6ca:	70 95       	com	r23
 6cc:	61 95       	neg	r22
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	99 23       	and	r25, r25
 6d6:	a9 f0       	breq	.+42     	; 0x702 <__floatsisf+0x40>
 6d8:	f9 2f       	mov	r31, r25
 6da:	96 e9       	ldi	r25, 0x96	; 150
 6dc:	bb 27       	eor	r27, r27
 6de:	93 95       	inc	r25
 6e0:	f6 95       	lsr	r31
 6e2:	87 95       	ror	r24
 6e4:	77 95       	ror	r23
 6e6:	67 95       	ror	r22
 6e8:	b7 95       	ror	r27
 6ea:	f1 11       	cpse	r31, r1
 6ec:	f8 cf       	rjmp	.-16     	; 0x6de <__floatsisf+0x1c>
 6ee:	fa f4       	brpl	.+62     	; 0x72e <__floatsisf+0x6c>
 6f0:	bb 0f       	add	r27, r27
 6f2:	11 f4       	brne	.+4      	; 0x6f8 <__floatsisf+0x36>
 6f4:	60 ff       	sbrs	r22, 0
 6f6:	1b c0       	rjmp	.+54     	; 0x72e <__floatsisf+0x6c>
 6f8:	6f 5f       	subi	r22, 0xFF	; 255
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	8f 4f       	sbci	r24, 0xFF	; 255
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	16 c0       	rjmp	.+44     	; 0x72e <__floatsisf+0x6c>
 702:	88 23       	and	r24, r24
 704:	11 f0       	breq	.+4      	; 0x70a <__floatsisf+0x48>
 706:	96 e9       	ldi	r25, 0x96	; 150
 708:	11 c0       	rjmp	.+34     	; 0x72c <__floatsisf+0x6a>
 70a:	77 23       	and	r23, r23
 70c:	21 f0       	breq	.+8      	; 0x716 <__floatsisf+0x54>
 70e:	9e e8       	ldi	r25, 0x8E	; 142
 710:	87 2f       	mov	r24, r23
 712:	76 2f       	mov	r23, r22
 714:	05 c0       	rjmp	.+10     	; 0x720 <__floatsisf+0x5e>
 716:	66 23       	and	r22, r22
 718:	71 f0       	breq	.+28     	; 0x736 <__floatsisf+0x74>
 71a:	96 e8       	ldi	r25, 0x86	; 134
 71c:	86 2f       	mov	r24, r22
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	2a f0       	brmi	.+10     	; 0x72e <__floatsisf+0x6c>
 724:	9a 95       	dec	r25
 726:	66 0f       	add	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	da f7       	brpl	.-10     	; 0x724 <__floatsisf+0x62>
 72e:	88 0f       	add	r24, r24
 730:	96 95       	lsr	r25
 732:	87 95       	ror	r24
 734:	97 f9       	bld	r25, 7
 736:	08 95       	ret

00000738 <__fp_split3>:
 738:	57 fd       	sbrc	r21, 7
 73a:	90 58       	subi	r25, 0x80	; 128
 73c:	44 0f       	add	r20, r20
 73e:	55 1f       	adc	r21, r21
 740:	59 f0       	breq	.+22     	; 0x758 <__fp_splitA+0x10>
 742:	5f 3f       	cpi	r21, 0xFF	; 255
 744:	71 f0       	breq	.+28     	; 0x762 <__fp_splitA+0x1a>
 746:	47 95       	ror	r20

00000748 <__fp_splitA>:
 748:	88 0f       	add	r24, r24
 74a:	97 fb       	bst	r25, 7
 74c:	99 1f       	adc	r25, r25
 74e:	61 f0       	breq	.+24     	; 0x768 <__fp_splitA+0x20>
 750:	9f 3f       	cpi	r25, 0xFF	; 255
 752:	79 f0       	breq	.+30     	; 0x772 <__fp_splitA+0x2a>
 754:	87 95       	ror	r24
 756:	08 95       	ret
 758:	12 16       	cp	r1, r18
 75a:	13 06       	cpc	r1, r19
 75c:	14 06       	cpc	r1, r20
 75e:	55 1f       	adc	r21, r21
 760:	f2 cf       	rjmp	.-28     	; 0x746 <__fp_split3+0xe>
 762:	46 95       	lsr	r20
 764:	f1 df       	rcall	.-30     	; 0x748 <__fp_splitA>
 766:	08 c0       	rjmp	.+16     	; 0x778 <__fp_splitA+0x30>
 768:	16 16       	cp	r1, r22
 76a:	17 06       	cpc	r1, r23
 76c:	18 06       	cpc	r1, r24
 76e:	99 1f       	adc	r25, r25
 770:	f1 cf       	rjmp	.-30     	; 0x754 <__fp_splitA+0xc>
 772:	86 95       	lsr	r24
 774:	71 05       	cpc	r23, r1
 776:	61 05       	cpc	r22, r1
 778:	08 94       	sec
 77a:	08 95       	ret

0000077c <__fp_zero>:
 77c:	e8 94       	clt

0000077e <__fp_szero>:
 77e:	bb 27       	eor	r27, r27
 780:	66 27       	eor	r22, r22
 782:	77 27       	eor	r23, r23
 784:	cb 01       	movw	r24, r22
 786:	97 f9       	bld	r25, 7
 788:	08 95       	ret

0000078a <__mulsf3>:
 78a:	0b d0       	rcall	.+22     	; 0x7a2 <__mulsf3x>
 78c:	78 c0       	rjmp	.+240    	; 0x87e <__fp_round>
 78e:	69 d0       	rcall	.+210    	; 0x862 <__fp_pscA>
 790:	28 f0       	brcs	.+10     	; 0x79c <__mulsf3+0x12>
 792:	6e d0       	rcall	.+220    	; 0x870 <__fp_pscB>
 794:	18 f0       	brcs	.+6      	; 0x79c <__mulsf3+0x12>
 796:	95 23       	and	r25, r21
 798:	09 f0       	breq	.+2      	; 0x79c <__mulsf3+0x12>
 79a:	5a c0       	rjmp	.+180    	; 0x850 <__fp_inf>
 79c:	5f c0       	rjmp	.+190    	; 0x85c <__fp_nan>
 79e:	11 24       	eor	r1, r1
 7a0:	ee cf       	rjmp	.-36     	; 0x77e <__fp_szero>

000007a2 <__mulsf3x>:
 7a2:	ca df       	rcall	.-108    	; 0x738 <__fp_split3>
 7a4:	a0 f3       	brcs	.-24     	; 0x78e <__mulsf3+0x4>

000007a6 <__mulsf3_pse>:
 7a6:	95 9f       	mul	r25, r21
 7a8:	d1 f3       	breq	.-12     	; 0x79e <__mulsf3+0x14>
 7aa:	95 0f       	add	r25, r21
 7ac:	50 e0       	ldi	r21, 0x00	; 0
 7ae:	55 1f       	adc	r21, r21
 7b0:	62 9f       	mul	r22, r18
 7b2:	f0 01       	movw	r30, r0
 7b4:	72 9f       	mul	r23, r18
 7b6:	bb 27       	eor	r27, r27
 7b8:	f0 0d       	add	r31, r0
 7ba:	b1 1d       	adc	r27, r1
 7bc:	63 9f       	mul	r22, r19
 7be:	aa 27       	eor	r26, r26
 7c0:	f0 0d       	add	r31, r0
 7c2:	b1 1d       	adc	r27, r1
 7c4:	aa 1f       	adc	r26, r26
 7c6:	64 9f       	mul	r22, r20
 7c8:	66 27       	eor	r22, r22
 7ca:	b0 0d       	add	r27, r0
 7cc:	a1 1d       	adc	r26, r1
 7ce:	66 1f       	adc	r22, r22
 7d0:	82 9f       	mul	r24, r18
 7d2:	22 27       	eor	r18, r18
 7d4:	b0 0d       	add	r27, r0
 7d6:	a1 1d       	adc	r26, r1
 7d8:	62 1f       	adc	r22, r18
 7da:	73 9f       	mul	r23, r19
 7dc:	b0 0d       	add	r27, r0
 7de:	a1 1d       	adc	r26, r1
 7e0:	62 1f       	adc	r22, r18
 7e2:	83 9f       	mul	r24, r19
 7e4:	a0 0d       	add	r26, r0
 7e6:	61 1d       	adc	r22, r1
 7e8:	22 1f       	adc	r18, r18
 7ea:	74 9f       	mul	r23, r20
 7ec:	33 27       	eor	r19, r19
 7ee:	a0 0d       	add	r26, r0
 7f0:	61 1d       	adc	r22, r1
 7f2:	23 1f       	adc	r18, r19
 7f4:	84 9f       	mul	r24, r20
 7f6:	60 0d       	add	r22, r0
 7f8:	21 1d       	adc	r18, r1
 7fa:	82 2f       	mov	r24, r18
 7fc:	76 2f       	mov	r23, r22
 7fe:	6a 2f       	mov	r22, r26
 800:	11 24       	eor	r1, r1
 802:	9f 57       	subi	r25, 0x7F	; 127
 804:	50 40       	sbci	r21, 0x00	; 0
 806:	8a f0       	brmi	.+34     	; 0x82a <__mulsf3_pse+0x84>
 808:	e1 f0       	breq	.+56     	; 0x842 <__mulsf3_pse+0x9c>
 80a:	88 23       	and	r24, r24
 80c:	4a f0       	brmi	.+18     	; 0x820 <__mulsf3_pse+0x7a>
 80e:	ee 0f       	add	r30, r30
 810:	ff 1f       	adc	r31, r31
 812:	bb 1f       	adc	r27, r27
 814:	66 1f       	adc	r22, r22
 816:	77 1f       	adc	r23, r23
 818:	88 1f       	adc	r24, r24
 81a:	91 50       	subi	r25, 0x01	; 1
 81c:	50 40       	sbci	r21, 0x00	; 0
 81e:	a9 f7       	brne	.-22     	; 0x80a <__mulsf3_pse+0x64>
 820:	9e 3f       	cpi	r25, 0xFE	; 254
 822:	51 05       	cpc	r21, r1
 824:	70 f0       	brcs	.+28     	; 0x842 <__mulsf3_pse+0x9c>
 826:	14 c0       	rjmp	.+40     	; 0x850 <__fp_inf>
 828:	aa cf       	rjmp	.-172    	; 0x77e <__fp_szero>
 82a:	5f 3f       	cpi	r21, 0xFF	; 255
 82c:	ec f3       	brlt	.-6      	; 0x828 <__mulsf3_pse+0x82>
 82e:	98 3e       	cpi	r25, 0xE8	; 232
 830:	dc f3       	brlt	.-10     	; 0x828 <__mulsf3_pse+0x82>
 832:	86 95       	lsr	r24
 834:	77 95       	ror	r23
 836:	67 95       	ror	r22
 838:	b7 95       	ror	r27
 83a:	f7 95       	ror	r31
 83c:	e7 95       	ror	r30
 83e:	9f 5f       	subi	r25, 0xFF	; 255
 840:	c1 f7       	brne	.-16     	; 0x832 <__mulsf3_pse+0x8c>
 842:	fe 2b       	or	r31, r30
 844:	88 0f       	add	r24, r24
 846:	91 1d       	adc	r25, r1
 848:	96 95       	lsr	r25
 84a:	87 95       	ror	r24
 84c:	97 f9       	bld	r25, 7
 84e:	08 95       	ret

00000850 <__fp_inf>:
 850:	97 f9       	bld	r25, 7
 852:	9f 67       	ori	r25, 0x7F	; 127
 854:	80 e8       	ldi	r24, 0x80	; 128
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	08 95       	ret

0000085c <__fp_nan>:
 85c:	9f ef       	ldi	r25, 0xFF	; 255
 85e:	80 ec       	ldi	r24, 0xC0	; 192
 860:	08 95       	ret

00000862 <__fp_pscA>:
 862:	00 24       	eor	r0, r0
 864:	0a 94       	dec	r0
 866:	16 16       	cp	r1, r22
 868:	17 06       	cpc	r1, r23
 86a:	18 06       	cpc	r1, r24
 86c:	09 06       	cpc	r0, r25
 86e:	08 95       	ret

00000870 <__fp_pscB>:
 870:	00 24       	eor	r0, r0
 872:	0a 94       	dec	r0
 874:	12 16       	cp	r1, r18
 876:	13 06       	cpc	r1, r19
 878:	14 06       	cpc	r1, r20
 87a:	05 06       	cpc	r0, r21
 87c:	08 95       	ret

0000087e <__fp_round>:
 87e:	09 2e       	mov	r0, r25
 880:	03 94       	inc	r0
 882:	00 0c       	add	r0, r0
 884:	11 f4       	brne	.+4      	; 0x88a <__fp_round+0xc>
 886:	88 23       	and	r24, r24
 888:	52 f0       	brmi	.+20     	; 0x89e <__fp_round+0x20>
 88a:	bb 0f       	add	r27, r27
 88c:	40 f4       	brcc	.+16     	; 0x89e <__fp_round+0x20>
 88e:	bf 2b       	or	r27, r31
 890:	11 f4       	brne	.+4      	; 0x896 <__fp_round+0x18>
 892:	60 ff       	sbrs	r22, 0
 894:	04 c0       	rjmp	.+8      	; 0x89e <__fp_round+0x20>
 896:	6f 5f       	subi	r22, 0xFF	; 255
 898:	7f 4f       	sbci	r23, 0xFF	; 255
 89a:	8f 4f       	sbci	r24, 0xFF	; 255
 89c:	9f 4f       	sbci	r25, 0xFF	; 255
 89e:	08 95       	ret

000008a0 <__umulhisi3>:
 8a0:	a2 9f       	mul	r26, r18
 8a2:	b0 01       	movw	r22, r0
 8a4:	b3 9f       	mul	r27, r19
 8a6:	c0 01       	movw	r24, r0
 8a8:	a3 9f       	mul	r26, r19
 8aa:	70 0d       	add	r23, r0
 8ac:	81 1d       	adc	r24, r1
 8ae:	11 24       	eor	r1, r1
 8b0:	91 1d       	adc	r25, r1
 8b2:	b2 9f       	mul	r27, r18
 8b4:	70 0d       	add	r23, r0
 8b6:	81 1d       	adc	r24, r1
 8b8:	11 24       	eor	r1, r1
 8ba:	91 1d       	adc	r25, r1
 8bc:	08 95       	ret

000008be <strcat>:
 8be:	fb 01       	movw	r30, r22
 8c0:	dc 01       	movw	r26, r24
 8c2:	0d 90       	ld	r0, X+
 8c4:	00 20       	and	r0, r0
 8c6:	e9 f7       	brne	.-6      	; 0x8c2 <strcat+0x4>
 8c8:	11 97       	sbiw	r26, 0x01	; 1
 8ca:	01 90       	ld	r0, Z+
 8cc:	0d 92       	st	X+, r0
 8ce:	00 20       	and	r0, r0
 8d0:	e1 f7       	brne	.-8      	; 0x8ca <strcat+0xc>
 8d2:	08 95       	ret

000008d4 <__itoa_ncheck>:
 8d4:	bb 27       	eor	r27, r27
 8d6:	4a 30       	cpi	r20, 0x0A	; 10
 8d8:	31 f4       	brne	.+12     	; 0x8e6 <__itoa_ncheck+0x12>
 8da:	99 23       	and	r25, r25
 8dc:	22 f4       	brpl	.+8      	; 0x8e6 <__itoa_ncheck+0x12>
 8de:	bd e2       	ldi	r27, 0x2D	; 45
 8e0:	90 95       	com	r25
 8e2:	81 95       	neg	r24
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	01 c0       	rjmp	.+2      	; 0x8ea <__utoa_common>

000008e8 <__utoa_ncheck>:
 8e8:	bb 27       	eor	r27, r27

000008ea <__utoa_common>:
 8ea:	fb 01       	movw	r30, r22
 8ec:	55 27       	eor	r21, r21
 8ee:	aa 27       	eor	r26, r26
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	aa 1f       	adc	r26, r26
 8f6:	a4 17       	cp	r26, r20
 8f8:	10 f0       	brcs	.+4      	; 0x8fe <__utoa_common+0x14>
 8fa:	a4 1b       	sub	r26, r20
 8fc:	83 95       	inc	r24
 8fe:	50 51       	subi	r21, 0x10	; 16
 900:	b9 f7       	brne	.-18     	; 0x8f0 <__utoa_common+0x6>
 902:	a0 5d       	subi	r26, 0xD0	; 208
 904:	aa 33       	cpi	r26, 0x3A	; 58
 906:	08 f0       	brcs	.+2      	; 0x90a <__utoa_common+0x20>
 908:	a9 5d       	subi	r26, 0xD9	; 217
 90a:	a1 93       	st	Z+, r26
 90c:	00 97       	sbiw	r24, 0x00	; 0
 90e:	79 f7       	brne	.-34     	; 0x8ee <__utoa_common+0x4>
 910:	b1 11       	cpse	r27, r1
 912:	b1 93       	st	Z+, r27
 914:	11 92       	st	Z+, r1
 916:	cb 01       	movw	r24, r22
 918:	00 c0       	rjmp	.+0      	; 0x91a <strrev>

0000091a <strrev>:
 91a:	dc 01       	movw	r26, r24
 91c:	fc 01       	movw	r30, r24
 91e:	67 2f       	mov	r22, r23
 920:	71 91       	ld	r23, Z+
 922:	77 23       	and	r23, r23
 924:	e1 f7       	brne	.-8      	; 0x91e <strrev+0x4>
 926:	32 97       	sbiw	r30, 0x02	; 2
 928:	04 c0       	rjmp	.+8      	; 0x932 <strrev+0x18>
 92a:	7c 91       	ld	r23, X
 92c:	6d 93       	st	X+, r22
 92e:	70 83       	st	Z, r23
 930:	62 91       	ld	r22, -Z
 932:	ae 17       	cp	r26, r30
 934:	bf 07       	cpc	r27, r31
 936:	c8 f3       	brcs	.-14     	; 0x92a <strrev+0x10>
 938:	08 95       	ret

0000093a <_exit>:
 93a:	f8 94       	cli

0000093c <__stop_program>:
 93c:	ff cf       	rjmp	.-2      	; 0x93c <__stop_program>
