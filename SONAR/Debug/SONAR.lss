
SONAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800200  000008d2  00000966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080022c  0080022c  00000992  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ed  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e8c  00000000  00000000  00002079  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080b  00000000  00000000  00002f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00003710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c2  00000000  00000000  000038a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000807  00000000  00000000  00003f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00004771  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c9 c0       	rjmp	.+402    	; 0x220 <__vector_35>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	e4 c0       	rjmp	.+456    	; 0x26e <__vector_41>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ed       	ldi	r30, 0xD2	; 210
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 32       	cpi	r26, 0x2C	; 44
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e2       	ldi	r26, 0x2C	; 44
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 33       	cpi	r26, 0x30	; 48
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	d6 c3       	rjmp	.+1964   	; 0x8ce <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
volatile int retorno_sensor=0;
volatile int flag_sensor=0;

// Comienzo del main
int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <main+0x6>
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
	sonar_setup();
 130:	72 d1       	rcall	.+740    	; 0x416 <sonar_setup>
	lcd_setup();
 132:	2a d1       	rcall	.+596    	; 0x388 <lcd_setup>
 134:	78 94       	sei
	sei();
 136:	08 e8       	ldi	r16, 0x88	; 136
	while (1)
	{
		for( OCR1A = t_0grados; OCR1A <= t_180grados; OCR1A = OCR1A + t_paso){				// Rotacion del servo, aumentando OCR1A con t_paso, cada ms_servo milisegundos
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	0f 2e       	mov	r0, r31
 13c:	fe e5       	ldi	r31, 0x5E	; 94
 13e:	cf 2e       	mov	r12, r31
 140:	dd 24       	eor	r13, r13
 142:	d3 94       	inc	r13
 144:	f0 2d       	mov	r31, r0
 146:	0f 2e       	mov	r0, r31
				volatile int pulse_width = OCR1A;											// Si flag_sensor es 1 (es decir que ocurrio el input capture en el timer 4)
				dist_calc(retorno_sensor, pulse_width);										// llamo a la funcion que calcula angulo y distancia, y los escribe en el display
				flag_sensor=0;																// Reseteo la flag del sensor
			}
		}
		for( OCR1A = t_180grados; OCR1A >= t_0grados; OCR1A = OCR1A - t_paso){				// Rotacion del servo en el otro sentido, decrementando OCR1A con t_paso, cada ms_servo milisegundos
 148:	f0 e6       	ldi	r31, 0x60	; 96
 14a:	ef 2e       	mov	r14, r31
 14c:	f9 e0       	ldi	r31, 0x09	; 9
 14e:	ff 2e       	mov	r15, r31
 150:	f0 2d       	mov	r31, r0
 152:	f8 01       	movw	r30, r16
	sonar_setup();
	lcd_setup();
	sei();
	while (1)
	{
		for( OCR1A = t_0grados; OCR1A <= t_180grados; OCR1A = OCR1A + t_paso){				// Rotacion del servo, aumentando OCR1A con t_paso, cada ms_servo milisegundos
 154:	d1 82       	std	Z+1, r13	; 0x01
 156:	c0 82       	st	Z, r12
 158:	80 81       	ld	r24, Z
 15a:	91 81       	ldd	r25, Z+1	; 0x01
 15c:	81 36       	cpi	r24, 0x61	; 97
 15e:	99 40       	sbci	r25, 0x09	; 9
 160:	58 f5       	brcc	.+86     	; 0x1b8 <main+0x94>
 162:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end>
			if (flag_sensor == 0){
 166:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__data_end+0x1>
 16a:	89 2b       	or	r24, r25
 16c:	51 f4       	brne	.+20     	; 0x182 <main+0x5e>
 16e:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	80 e7       	ldi	r24, 0x70	; 112
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x50>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x5a>
 17e:	00 00       	nop
 180:	10 c0       	rjmp	.+32     	; 0x1a2 <main+0x7e>
 182:	f8 01       	movw	r30, r16
				_delay_ms(ms_servo);
			}else{
				volatile int pulse_width = OCR1A;											// Si flag_sensor es 1 (es decir que ocurrio el input capture en el timer 4)
 184:	80 81       	ld	r24, Z
 186:	91 81       	ldd	r25, Z+1	; 0x01
 188:	9c 83       	std	Y+4, r25	; 0x04
 18a:	8b 83       	std	Y+3, r24	; 0x03
 18c:	6b 81       	ldd	r22, Y+3	; 0x03
				dist_calc(retorno_sensor, pulse_width);										// llamo a la funcion que calcula angulo y distancia, y los escribe en el display
 18e:	7c 81       	ldd	r23, Y+4	; 0x04
 190:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <retorno_sensor>
 194:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <retorno_sensor+0x1>
 198:	7e d1       	rcall	.+764    	; 0x496 <dist_calc>
 19a:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <__data_end+0x1>
				flag_sensor=0;																// Reseteo la flag del sensor
 19e:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <__data_end>
 1a2:	f8 01       	movw	r30, r16
	sonar_setup();
	lcd_setup();
	sei();
	while (1)
	{
		for( OCR1A = t_0grados; OCR1A <= t_180grados; OCR1A = OCR1A + t_paso){				// Rotacion del servo, aumentando OCR1A con t_paso, cada ms_servo milisegundos
 1a4:	80 81       	ld	r24, Z
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	0a 96       	adiw	r24, 0x0a	; 10
 1aa:	91 83       	std	Z+1, r25	; 0x01
 1ac:	80 83       	st	Z, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	91 81       	ldd	r25, Z+1	; 0x01
 1b2:	81 36       	cpi	r24, 0x61	; 97
 1b4:	99 40       	sbci	r25, 0x09	; 9
 1b6:	a8 f2       	brcs	.-86     	; 0x162 <main+0x3e>
 1b8:	f8 01       	movw	r30, r16
				volatile int pulse_width = OCR1A;											// Si flag_sensor es 1 (es decir que ocurrio el input capture en el timer 4)
				dist_calc(retorno_sensor, pulse_width);										// llamo a la funcion que calcula angulo y distancia, y los escribe en el display
				flag_sensor=0;																// Reseteo la flag del sensor
			}
		}
		for( OCR1A = t_180grados; OCR1A >= t_0grados; OCR1A = OCR1A - t_paso){				// Rotacion del servo en el otro sentido, decrementando OCR1A con t_paso, cada ms_servo milisegundos
 1ba:	f1 82       	std	Z+1, r15	; 0x01
 1bc:	e0 82       	st	Z, r14
 1be:	80 81       	ld	r24, Z
 1c0:	91 81       	ldd	r25, Z+1	; 0x01
 1c2:	8e 35       	cpi	r24, 0x5E	; 94
 1c4:	91 40       	sbci	r25, 0x01	; 1
 1c6:	28 f2       	brcs	.-118    	; 0x152 <main+0x2e>
 1c8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end>
			if (flag_sensor == 0){
 1cc:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__data_end+0x1>
 1d0:	89 2b       	or	r24, r25
 1d2:	51 f4       	brne	.+20     	; 0x1e8 <main+0xc4>
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	80 e7       	ldi	r24, 0x70	; 112
 1d8:	92 e0       	ldi	r25, 0x02	; 2
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0xb6>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0xc0>
 1e4:	00 00       	nop
 1e6:	10 c0       	rjmp	.+32     	; 0x208 <main+0xe4>
 1e8:	f8 01       	movw	r30, r16
				_delay_ms(ms_servo);							
			}else{
				volatile int pulse_width = OCR1A;											// Se repite lo mismo que el giro en el otro sentido
 1ea:	80 81       	ld	r24, Z
 1ec:	91 81       	ldd	r25, Z+1	; 0x01
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	69 81       	ldd	r22, Y+1	; 0x01
				dist_calc(retorno_sensor, pulse_width);
 1f4:	7a 81       	ldd	r23, Y+2	; 0x02
 1f6:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <retorno_sensor>
 1fa:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <retorno_sensor+0x1>
 1fe:	4b d1       	rcall	.+662    	; 0x496 <dist_calc>
 200:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <__data_end+0x1>
				flag_sensor=0;
 204:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <__data_end>
 208:	f8 01       	movw	r30, r16
				volatile int pulse_width = OCR1A;											// Si flag_sensor es 1 (es decir que ocurrio el input capture en el timer 4)
				dist_calc(retorno_sensor, pulse_width);										// llamo a la funcion que calcula angulo y distancia, y los escribe en el display
				flag_sensor=0;																// Reseteo la flag del sensor
			}
		}
		for( OCR1A = t_180grados; OCR1A >= t_0grados; OCR1A = OCR1A - t_paso){				// Rotacion del servo en el otro sentido, decrementando OCR1A con t_paso, cada ms_servo milisegundos
 20a:	80 81       	ld	r24, Z
 20c:	91 81       	ldd	r25, Z+1	; 0x01
 20e:	0a 97       	sbiw	r24, 0x0a	; 10
 210:	91 83       	std	Z+1, r25	; 0x01
 212:	80 83       	st	Z, r24
 214:	80 81       	ld	r24, Z
 216:	91 81       	ldd	r25, Z+1	; 0x01
 218:	8e 35       	cpi	r24, 0x5E	; 94
 21a:	91 40       	sbci	r25, 0x01	; 1
 21c:	a8 f6       	brcc	.-86     	; 0x1c8 <main+0xa4>
 21e:	99 cf       	rjmp	.-206    	; 0x152 <main+0x2e>

00000220 <__vector_35>:
 220:	1f 92       	push	r1
  Nombre:	TIMER3_OVF_vect
  Fuente:	Flag de overflow del timer 3	
  Propósito:	Mandar un nuevo pulso al sensor luego de pasar un cierto tiempo (200 ms en este caso)
*/

ISR(TIMER3_OVF_vect){					// Vector de interrupcion del overflow del timer 3
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	0b b6       	in	r0, 0x3b	; 59
 22c:	0f 92       	push	r0
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	6f 93       	push	r22
 238:	7f 93       	push	r23
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	af 93       	push	r26
 240:	bf 93       	push	r27
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
	trigger_pulse();
 246:	bd d1       	rcall	.+890    	; 0x5c2 <trigger_pulse>
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0b be       	out	0x3b, r0	; 59
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_41>:
  Propósito:	Almacernar el valor de ICR4 en una variable global, activar la flag indicando la entrada a la subrutina
				y reseteo de los contadores del timer
*/

ISR(TIMER4_CAPT_vect)							// Vector de interrupción de input capture para el Timer 4.
{	
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	0b b6       	in	r0, 0x3b	; 59
 27a:	0f 92       	push	r0
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	retorno_sensor = ICR4;						// Almaceno el valor de ICR4 en una variable global
 288:	e6 ea       	ldi	r30, 0xA6	; 166
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	91 81       	ldd	r25, Z+1	; 0x01
 290:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <retorno_sensor+0x1>
 294:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <retorno_sensor>
	flag_sensor = 1;							// Seteo la flag que indica que el sensor devolvio un pulso
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <__data_end+0x1>
 2a0:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <__data_end>
	TCCR4B |= (0<<CS41);						// Freno el timer.
 2a4:	a1 ea       	ldi	r26, 0xA1	; 161
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	8c 91       	ld	r24, X
 2aa:	8c 93       	st	X, r24
	ICR4 = 0;									// Limpio los registros contadores.
 2ac:	11 82       	std	Z+1, r1	; 0x01
 2ae:	10 82       	st	Z, r1
	TCNT4 = 0;
 2b0:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 2b4:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0b be       	out	0x3b, r0	; 59
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <lcd_write>:
  Inputs:     "info" es la información a enviar al registro del LCD.
  Outputs:    Ninguno.
*/
void lcd_write(uint8_t info)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // Asumo que el dato es '0'.
 2d2:	17 98       	cbi	0x02, 7	; 2
    if (info & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);        // Fuerzo que el dato sea '1' si es necesario.
 2d4:	88 23       	and	r24, r24
 2d6:	0c f4       	brge	.+2      	; 0x2da <lcd_write+0x8>
 2d8:	17 9a       	sbi	0x02, 7	; 2

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // Repito para todos los otros bits.
 2da:	16 98       	cbi	0x02, 6	; 2
    if (info & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
 2dc:	86 fd       	sbrc	r24, 6
 2de:	16 9a       	sbi	0x02, 6	; 2

    lcd_D5_port &= ~(1<<lcd_D5_bit);
 2e0:	15 98       	cbi	0x02, 5	; 2
    if (info & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
 2e2:	85 fd       	sbrc	r24, 5
 2e4:	15 9a       	sbi	0x02, 5	; 2

    lcd_D4_port &= ~(1<<lcd_D4_bit);
 2e6:	14 98       	cbi	0x02, 4	; 2
    if (info & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
 2e8:	84 fd       	sbrc	r24, 4
 2ea:	14 9a       	sbi	0x02, 4	; 2

    lcd_D3_port &= ~(1<<lcd_D3_bit);
 2ec:	13 98       	cbi	0x02, 3	; 2
    if (info & 1<<3) lcd_D3_port |= (1<<lcd_D3_bit);
 2ee:	83 fd       	sbrc	r24, 3
 2f0:	13 9a       	sbi	0x02, 3	; 2

    lcd_D2_port &= ~(1<<lcd_D2_bit);
 2f2:	12 98       	cbi	0x02, 2	; 2
    if (info & 1<<2) lcd_D2_port |= (1<<lcd_D2_bit);
 2f4:	82 fd       	sbrc	r24, 2
 2f6:	12 9a       	sbi	0x02, 2	; 2

    lcd_D1_port &= ~(1<<lcd_D1_bit);
 2f8:	11 98       	cbi	0x02, 1	; 2
    if (info & 1<<1) lcd_D1_port |= (1<<lcd_D1_bit);
 2fa:	81 fd       	sbrc	r24, 1
 2fc:	11 9a       	sbi	0x02, 1	; 2

    lcd_D0_port &= ~(1<<lcd_D0_bit);
 2fe:	10 98       	cbi	0x02, 0	; 2
    if (info & 1<<0) lcd_D0_port |= (1<<lcd_D0_bit);
 300:	80 fd       	sbrc	r24, 0
 302:	10 9a       	sbi	0x02, 0	; 2

// Escribo los datos.
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
 304:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	85 e0       	ldi	r24, 0x05	; 5
 308:	8a 95       	dec	r24
 30a:	f1 f7       	brne	.-4      	; 0x308 <lcd_write+0x36>
 30c:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
 30e:	29 98       	cbi	0x05, 1	; 5
 310:	85 e0       	ldi	r24, 0x05	; 5
 312:	8a 95       	dec	r24
 314:	f1 f7       	brne	.-4      	; 0x312 <lcd_write+0x40>
 316:	00 00       	nop
 318:	08 95       	ret

0000031a <lcd_write_char>:
  Outputs:    Ninguno.
*/

void lcd_write_char(uint8_t datos)
{
    lcd_RS_port |= (1<<lcd_RS_bit);                 // Selecciono el registro de datos.
 31a:	28 9a       	sbi	0x05, 0	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Me aseguro que E esté en bajo.
 31c:	29 98       	cbi	0x05, 1	; 5
    lcd_write(datos);                             // Escribo los datos.
 31e:	d9 cf       	rjmp	.-78     	; 0x2d2 <lcd_write>
 320:	08 95       	ret

00000322 <lcd_write_string>:
  Inputs:     "texto" es el string que se representará en el display.
  Outputs:    Ninguno.
*/

void lcd_write_string(uint8_t texto[])
{
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	1f 92       	push	r1
 32c:	1f 92       	push	r1
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	8c 01       	movw	r16, r24
    volatile int i = 0;                             
 334:	1a 82       	std	Y+2, r1	; 0x02
 336:	19 82       	std	Y+1, r1	; 0x01
    while (texto[i] != 0)
 338:	e9 81       	ldd	r30, Y+1	; 0x01
 33a:	fa 81       	ldd	r31, Y+2	; 0x02
 33c:	e8 0f       	add	r30, r24
 33e:	f9 1f       	adc	r31, r25
 340:	80 81       	ld	r24, Z
 342:	88 23       	and	r24, r24
 344:	b1 f0       	breq	.+44     	; 0x372 <lcd_write_string+0x50>
    {
        lcd_write_char(texto[i]);
 346:	e9 81       	ldd	r30, Y+1	; 0x01
 348:	fa 81       	ldd	r31, Y+2	; 0x02
 34a:	e0 0f       	add	r30, r16
 34c:	f1 1f       	adc	r31, r17
 34e:	80 81       	ld	r24, Z
 350:	e4 df       	rcall	.-56     	; 0x31a <lcd_write_char>
        i++;
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	9a 81       	ldd	r25, Y+2	; 0x02
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	9a 83       	std	Y+2, r25	; 0x02
 35a:	89 83       	std	Y+1, r24	; 0x01
 35c:	85 ed       	ldi	r24, 0xD5	; 213
 35e:	8a 95       	dec	r24
 360:	f1 f7       	brne	.-4      	; 0x35e <lcd_write_string+0x3c>
 362:	00 00       	nop
*/

void lcd_write_string(uint8_t texto[])
{
    volatile int i = 0;                             
    while (texto[i] != 0)
 364:	e9 81       	ldd	r30, Y+1	; 0x01
 366:	fa 81       	ldd	r31, Y+2	; 0x02
 368:	e0 0f       	add	r30, r16
 36a:	f1 1f       	adc	r31, r17
 36c:	80 81       	ld	r24, Z
 36e:	81 11       	cpse	r24, r1
 370:	ea cf       	rjmp	.-44     	; 0x346 <lcd_write_string+0x24>
    {
        lcd_write_char(texto[i]);
        i++;
        _delay_us(40);                              // Delay de 40us.
    }
}
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <lcd_write_instr>:
  Outputs:    Ninguno.
*/

void lcd_write_instr(uint8_t instrucciones)
{
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // Selecciono el registro de instrucciones.
 380:	28 98       	cbi	0x05, 0	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Me aseguro que E esté en bajo.
 382:	29 98       	cbi	0x05, 1	; 5
    lcd_write(instrucciones);                     // Escribo las instrucciones.
 384:	a6 cf       	rjmp	.-180    	; 0x2d2 <lcd_write>
 386:	08 95       	ret

00000388 <lcd_setup>:
  Outputs:    Ninguno.
*/

void lcd_setup(void)
{
	DDRA = 0xFF;						// Seteo el PortA de D0:D7 como salida
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	81 b9       	out	0x01, r24	; 1
	DDRB |= (1 << PB0) | (1 << PB1);	// Seteo Enable y RS como salida
 38c:	84 b1       	in	r24, 0x04	; 4
 38e:	83 60       	ori	r24, 0x03	; 3
 390:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	83 ef       	ldi	r24, 0xF3	; 243
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <lcd_setup+0x10>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <lcd_setup+0x1a>
 3a2:	00 00       	nop
	
// Delay de encendido.
    _delay_ms(40);                                 // 40ms.

// Reset del controlador del display LCD.
    lcd_write_instr(lcd_reset);    // Primera parte de la secuencia de reset.
 3a4:	80 e3       	ldi	r24, 0x30	; 48
 3a6:	ec df       	rcall	.-40     	; 0x380 <lcd_write_instr>
 3a8:	8f e7       	ldi	r24, 0x7F	; 127
 3aa:	9e e3       	ldi	r25, 0x3E	; 62
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <lcd_setup+0x24>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <lcd_setup+0x2a>
 3b2:	00 00       	nop
    _delay_ms(4);                                  // Delay de 4.1ms.

    lcd_write_instr(lcd_reset);    // Segunda parte de la secuencia de reset.
 3b4:	80 e3       	ldi	r24, 0x30	; 48
 3b6:	e4 df       	rcall	.-56     	; 0x380 <lcd_write_instr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b8:	8f e8       	ldi	r24, 0x8F	; 143
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <lcd_setup+0x34>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lcd_setup+0x3a>
    _delay_us(100);                                 // Delay de 100us.

    lcd_write_instr(lcd_reset);    // Tercera parte de la secuencia de reset.
 3c2:	00 00       	nop
 3c4:	80 e3       	ldi	r24, 0x30	; 48
 3c6:	dc df       	rcall	.-72     	; 0x380 <lcd_write_instr>
 3c8:	8f e8       	ldi	r24, 0x8F	; 143
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_setup+0x44>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <lcd_setup+0x4a>
    _delay_us(100);                                

// Configuración del display LED.
    lcd_write_instr(lcd_set);    // Seteo el modo, la cantidad de líneas y font.
 3d2:	00 00       	nop
 3d4:	88 e3       	ldi	r24, 0x38	; 56
 3d6:	d4 df       	rcall	.-88     	; 0x380 <lcd_write_instr>
 3d8:	95 ed       	ldi	r25, 0xD5	; 213
 3da:	9a 95       	dec	r25
 3dc:	f1 f7       	brne	.-4      	; 0x3da <lcd_setup+0x52>
    _delay_us(40);                                  // Delay de 40us.

// Rutina de inicialización (chequear después).

    lcd_write_instr(lcd_off);       // Apago el display.
 3de:	00 00       	nop
 3e0:	88 e0       	ldi	r24, 0x08	; 8
 3e2:	ce df       	rcall	.-100    	; 0x380 <lcd_write_instr>
 3e4:	25 ed       	ldi	r18, 0xD5	; 213
 3e6:	2a 95       	dec	r18
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <lcd_setup+0x5e>
    _delay_us(40);                                  // Delay de 40us.

    lcd_write_instr(lcd_clear);            // Limpio la RAM del display.
 3ea:	00 00       	nop
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	c8 df       	rcall	.-112    	; 0x380 <lcd_write_instr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f0:	8f e3       	ldi	r24, 0x3F	; 63
 3f2:	9f e1       	ldi	r25, 0x1F	; 31
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <lcd_setup+0x6c>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <lcd_setup+0x72>
    _delay_ms(2);                                   // Delay de 1.64ms.

    lcd_write_instr(lcd_entrymode);        // Seteo el comportamiento del cursor.
 3fa:	00 00       	nop
 3fc:	86 e0       	ldi	r24, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fe:	c0 df       	rcall	.-128    	; 0x380 <lcd_write_instr>
 400:	95 ed       	ldi	r25, 0xD5	; 213
 402:	9a 95       	dec	r25
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
    _delay_us(40);                                  // Delay de 40us.

    lcd_write_instr(lcd_on);        // Prendo el display.
 406:	00 00       	nop
 408:	8c e0       	ldi	r24, 0x0C	; 12
 40a:	ba df       	rcall	.-140    	; 0x380 <lcd_write_instr>
 40c:	25 ed       	ldi	r18, 0xD5	; 213
 40e:	2a 95       	dec	r18
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 00       	nop
 414:	08 95       	ret

00000416 <sonar_setup>:
  Outputs:    Ninguno.
*/

void sonar_setup(void){
	// Timer 1 para la onda PWM PFC del servo
	TCCR1A |= (1 << COM1A1);						// Limpio OC1A para upcounting en compare match y seteo 0C1A para downcounting en compare match
 416:	e0 e8       	ldi	r30, 0x80	; 128
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	80 68       	ori	r24, 0x80	; 128
 41e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << CS11);					// WGM1 3:0 (bits 3 y 2 en TCCR1B y 1 y 0 en TCCR1A) en 0b1000 para modo PFCPWM con TOP = ICR1, y prescaler en 8
 420:	e1 e8       	ldi	r30, 0x81	; 129
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	82 61       	ori	r24, 0x12	; 18
 428:	80 83       	st	Z, r24
	DDRB |= (1 << DDB5);							// Port B5 (Pin 11, OC1A) como salida
 42a:	25 9a       	sbi	0x04, 5	; 4
	ICR1 = 20000;								// 20 ms de periodo PWM
 42c:	80 e2       	ldi	r24, 0x20	; 32
 42e:	9e e4       	ldi	r25, 0x4E	; 78
 430:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 434:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	
	// Timer 3 para contar tiempo entre pulsos
	TCCR3A |= (1 << WGM31);								// Modo fast PWM con overflow en el valor de ICR3
 438:	e0 e9       	ldi	r30, 0x90	; 144
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	82 60       	ori	r24, 0x02	; 2
 440:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM33) | (1 << WGM32) | (1 << CS31) | (1 << CS30);		// 64 de prescaler
 442:	e1 e9       	ldi	r30, 0x91	; 145
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	8b 61       	ori	r24, 0x1B	; 27
 44a:	80 83       	st	Z, r24
	TIMSK3 |= (1 << TOIE3);								// Activo el interrupt por overflow
 44c:	e1 e7       	ldi	r30, 0x71	; 113
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	81 60       	ori	r24, 0x01	; 1
 454:	80 83       	st	Z, r24
	ICR3 = 50000;									// Seteo el TOP para que el overflow se de a los 200 ms
 456:	80 e5       	ldi	r24, 0x50	; 80
 458:	93 ec       	ldi	r25, 0xC3	; 195
 45a:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 45e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
	
	// Timer 4 para medir el tiempo entre el pulso de salida y el que devuelve el sensor
	TCCR4B |= (1 << ICES4);								// Seteo que la interrupción se dé en flanco de subida y un prescaler de 8.
 462:	e1 ea       	ldi	r30, 0xA1	; 161
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	80 64       	ori	r24, 0x40	; 64
 46a:	80 83       	st	Z, r24
	TIMSK4 |= (1 << ICIE4);
 46c:	e2 e7       	ldi	r30, 0x72	; 114
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	80 62       	ori	r24, 0x20	; 32
 474:	80 83       	st	Z, r24
	DDRL |= (1 << PL1);								// Seteo el PortL 1 como salida para el pulso del sensor (Pin 48) y el 0 como entrada para el echo (Pin 49)
 476:	ea e0       	ldi	r30, 0x0A	; 10
 478:	f1 e0       	ldi	r31, 0x01	; 1
 47a:	80 81       	ld	r24, Z
 47c:	82 60       	ori	r24, 0x02	; 2
 47e:	80 83       	st	Z, r24
	
	// Modos de bajo consumo (PRR0 y PRR1)
	PRR0 |= (1 << PRTWI) | (1 << PRSPI) | (1 << PRUSART0) | (1 << PRADC);		// Desactivo TWI (Two wire interface), SPI, el ADC y los USART
 480:	e4 e6       	ldi	r30, 0x64	; 100
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	87 68       	ori	r24, 0x87	; 135
 488:	80 83       	st	Z, r24
	PRR1 |= (1 << PRUSART3) | (1 << PRUSART2) | (1 << PRUSART1);
 48a:	e5 e6       	ldi	r30, 0x65	; 101
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	87 60       	ori	r24, 0x07	; 7
 492:	80 83       	st	Z, r24
 494:	08 95       	ret

00000496 <dist_calc>:
  Inputs:     tiempo_us, el valor del contador del timer 4 entre que se manda el pulso y el sensor devuelve
			  pulse_width, el valor de OCR1A que determina el ancho de pulso para el angulo del servo
  Outputs:    Ninguno.
*/

void dist_calc(unsigned int tiempo_us, unsigned int pulse_width){
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	a8 97       	sbiw	r28, 0x28	; 40
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	f8 94       	cli
 4ac:	de bf       	out	0x3e, r29	; 62
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	cd bf       	out	0x3d, r28	; 61
 4b2:	ab 01       	movw	r20, r22
	unsigned int dist_cm = tiempo_us/(2*58);									// Una cuenta de 2 equivale a 1 us con 8 de prescaler. La cuenta para la distancia en cm es t_us/58 = dist_cm  ==>  count/(2*58) = dist_cm.
 4b4:	9c 01       	movw	r18, r24
 4b6:	af e9       	ldi	r26, 0x9F	; 159
 4b8:	b6 e4       	ldi	r27, 0x46	; 70
 4ba:	b2 d1       	rcall	.+868    	; 0x820 <__umulhisi3>
 4bc:	7c 01       	movw	r14, r24
 4be:	f6 94       	lsr	r15
 4c0:	e7 94       	ror	r14
 4c2:	f6 94       	lsr	r15
 4c4:	e7 94       	ror	r14
 4c6:	f6 94       	lsr	r15
 4c8:	e7 94       	ror	r14
 4ca:	f6 94       	lsr	r15
 4cc:	e7 94       	ror	r14
 4ce:	f6 94       	lsr	r15
 4d0:	e7 94       	ror	r14
	unsigned int angulo = (unsigned int) (pulse_width - t_0grados)*0.088;					// Obtengo el angulo (lo paso a int es vez de usar floor(), para no usar math.h)
	char string_angulo[15] = "Angulo  ";
 4d2:	89 e0       	ldi	r24, 0x09	; 9
 4d4:	e0 e0       	ldi	r30, 0x00	; 0
 4d6:	f2 e0       	ldi	r31, 0x02	; 2
 4d8:	8e 01       	movw	r16, r28
 4da:	0f 5f       	subi	r16, 0xFF	; 255
 4dc:	1f 4f       	sbci	r17, 0xFF	; 255
 4de:	d8 01       	movw	r26, r16
 4e0:	01 90       	ld	r0, Z+
 4e2:	0d 92       	st	X+, r0
 4e4:	8a 95       	dec	r24
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <dist_calc+0x4a>
 4e8:	fe 01       	movw	r30, r28
 4ea:	3a 96       	adiw	r30, 0x0a	; 10
 4ec:	86 e0       	ldi	r24, 0x06	; 6
 4ee:	df 01       	movw	r26, r30
 4f0:	1d 92       	st	X+, r1
 4f2:	8a 95       	dec	r24
 4f4:	e9 f7       	brne	.-6      	; 0x4f0 <dist_calc+0x5a>
	char angulo_char[5];
	strcat(string_angulo,itoa(angulo,angulo_char,10));
 4f6:	ba 01       	movw	r22, r20
 4f8:	6e 55       	subi	r22, 0x5E	; 94
 4fa:	71 40       	sbci	r23, 0x01	; 1
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	9e d0       	rcall	.+316    	; 0x63e <__floatunsisf>
 502:	28 e5       	ldi	r18, 0x58	; 88
 504:	39 e3       	ldi	r19, 0x39	; 57
 506:	44 eb       	ldi	r20, 0xB4	; 180
 508:	5d e3       	ldi	r21, 0x3D	; 61
 50a:	ff d0       	rcall	.+510    	; 0x70a <__mulsf3>
 50c:	6c d0       	rcall	.+216    	; 0x5e6 <__fixunssfsi>
 50e:	dc 01       	movw	r26, r24
 510:	cb 01       	movw	r24, r22
 512:	4a e0       	ldi	r20, 0x0A	; 10
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	be 01       	movw	r22, r28
 518:	60 5f       	subi	r22, 0xF0	; 240
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	9b d1       	rcall	.+822    	; 0x854 <itoa>
 51e:	bc 01       	movw	r22, r24
 520:	c8 01       	movw	r24, r16
 522:	8d d1       	rcall	.+794    	; 0x83e <strcat>
	strcat(string_angulo," deg  ");													// Se agregan 2 espacios para que no quede escrita una g al final una vez que se achica la contidad de cifras (100 grados a 99 grados)
 524:	d8 01       	movw	r26, r16
 526:	0d 90       	ld	r0, X+
 528:	00 20       	and	r0, r0
 52a:	e9 f7       	brne	.-6      	; 0x526 <dist_calc+0x90>
 52c:	11 97       	sbiw	r26, 0x01	; 1
 52e:	87 e0       	ldi	r24, 0x07	; 7
 530:	ee e1       	ldi	r30, 0x1E	; 30
 532:	f2 e0       	ldi	r31, 0x02	; 2
 534:	01 90       	ld	r0, Z+
 536:	0d 92       	st	X+, r0
 538:	8a 95       	dec	r24
	lcd_write_string(string_angulo);												// Escribo el angulo en el display
 53a:	e1 f7       	brne	.-8      	; 0x534 <dist_calc+0x9e>
 53c:	c8 01       	movw	r24, r16
 53e:	f1 de       	rcall	.-542    	; 0x322 <lcd_write_string>
	
	if(dist_cm<20) {											// Si el objeto se encuentra a una distancia aceptable...
 540:	b4 e1       	ldi	r27, 0x14	; 20
 542:	eb 16       	cp	r14, r27
 544:	f1 04       	cpc	r15, r1
 546:	70 f5       	brcc	.+92     	; 0x5a4 <dist_calc+0x10e>
		unsigned char string_dist[15] = "Dist.  ";				// Defino el string para el display.
 548:	88 e0       	ldi	r24, 0x08	; 8
 54a:	ef e0       	ldi	r30, 0x0F	; 15
 54c:	f2 e0       	ldi	r31, 0x02	; 2
 54e:	de 01       	movw	r26, r28
 550:	55 96       	adiw	r26, 0x15	; 21
 552:	01 90       	ld	r0, Z+
 554:	0d 92       	st	X+, r0
 556:	8a 95       	dec	r24
 558:	e1 f7       	brne	.-8      	; 0x552 <dist_calc+0xbc>
 55a:	fe 01       	movw	r30, r28
 55c:	7d 96       	adiw	r30, 0x1d	; 29
 55e:	87 e0       	ldi	r24, 0x07	; 7
 560:	df 01       	movw	r26, r30
 562:	1d 92       	st	X+, r1
 564:	8a 95       	dec	r24
		char dist_char[5];
		lcd_write_instr(lcd_set_cursor | lcd_line_two);			// Muevo el cursor a la segunda línea.
 566:	e9 f7       	brne	.-6      	; 0x562 <dist_calc+0xcc>
 568:	80 ec       	ldi	r24, 0xC0	; 192
		strcat(string_dist,itoa(dist_cm,dist_char,10));
 56a:	0a df       	rcall	.-492    	; 0x380 <lcd_write_instr>
 56c:	4a e0       	ldi	r20, 0x0A	; 10
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	be 01       	movw	r22, r28
 572:	6c 5d       	subi	r22, 0xDC	; 220
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	c7 01       	movw	r24, r14
 578:	6d d1       	rcall	.+730    	; 0x854 <itoa>
 57a:	0c 5e       	subi	r16, 0xEC	; 236
 57c:	1f 4f       	sbci	r17, 0xFF	; 255
 57e:	bc 01       	movw	r22, r24
 580:	c8 01       	movw	r24, r16
 582:	5d d1       	rcall	.+698    	; 0x83e <strcat>
		strcat(string_dist," cm  ");
 584:	d8 01       	movw	r26, r16
 586:	0d 90       	ld	r0, X+
 588:	00 20       	and	r0, r0
 58a:	e9 f7       	brne	.-6      	; 0x586 <dist_calc+0xf0>
 58c:	11 97       	sbiw	r26, 0x01	; 1
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	e5 e2       	ldi	r30, 0x25	; 37
 592:	f2 e0       	ldi	r31, 0x02	; 2
 594:	01 90       	ld	r0, Z+
		lcd_write_string(string_dist);					// Escribo la distancia.
 596:	0d 92       	st	X+, r0
 598:	8a 95       	dec	r24
 59a:	e1 f7       	brne	.-8      	; 0x594 <dist_calc+0xfe>
		lcd_write_instr(lcd_set_cursor | lcd_line_one);  		// Muevo el cursor de vuelta a la primer línea.
 59c:	c8 01       	movw	r24, r16
 59e:	c1 de       	rcall	.-638    	; 0x322 <lcd_write_string>
 5a0:	80 e8       	ldi	r24, 0x80	; 128
	}
	
	lcd_write_instr(lcd_home);  
 5a2:	ee de       	rcall	.-548    	; 0x380 <lcd_write_instr>
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	ec de       	rcall	.-552    	; 0x380 <lcd_write_instr>
}
 5a8:	a8 96       	adiw	r28, 0x28	; 40
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	08 95       	ret

000005c2 <trigger_pulse>:
  Inputs:     Ninguno.
  Outputs:    Ninguno.
*/

void trigger_pulse(void){
	TCCR4B |= (1<<CS41);				// Comienzo el conteo con prescaler en 8.
 5c2:	e1 ea       	ldi	r30, 0xA1	; 161
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	82 60       	ori	r24, 0x02	; 2
 5ca:	80 83       	st	Z, r24
	
	PORTL |= (1 << PL1);				// Envio el pulso de 10us al sensor.
 5cc:	eb e0       	ldi	r30, 0x0B	; 11
 5ce:	f1 e0       	ldi	r31, 0x01	; 1
 5d0:	80 81       	ld	r24, Z
 5d2:	82 60       	ori	r24, 0x02	; 2
 5d4:	80 83       	st	Z, r24
 5d6:	85 e3       	ldi	r24, 0x35	; 53
 5d8:	8a 95       	dec	r24
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <trigger_pulse+0x16>
 5dc:	00 00       	nop
	_delay_us(10);
	PORTL &= ~(1 << PL1);
 5de:	80 81       	ld	r24, Z
 5e0:	8d 7f       	andi	r24, 0xFD	; 253
 5e2:	80 83       	st	Z, r24
 5e4:	08 95       	ret

000005e6 <__fixunssfsi>:
 5e6:	70 d0       	rcall	.+224    	; 0x6c8 <__fp_splitA>
 5e8:	88 f0       	brcs	.+34     	; 0x60c <__fixunssfsi+0x26>
 5ea:	9f 57       	subi	r25, 0x7F	; 127
 5ec:	90 f0       	brcs	.+36     	; 0x612 <__fixunssfsi+0x2c>
 5ee:	b9 2f       	mov	r27, r25
 5f0:	99 27       	eor	r25, r25
 5f2:	b7 51       	subi	r27, 0x17	; 23
 5f4:	a0 f0       	brcs	.+40     	; 0x61e <__fixunssfsi+0x38>
 5f6:	d1 f0       	breq	.+52     	; 0x62c <__fixunssfsi+0x46>
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	1a f0       	brmi	.+6      	; 0x608 <__fixunssfsi+0x22>
 602:	ba 95       	dec	r27
 604:	c9 f7       	brne	.-14     	; 0x5f8 <__fixunssfsi+0x12>
 606:	12 c0       	rjmp	.+36     	; 0x62c <__fixunssfsi+0x46>
 608:	b1 30       	cpi	r27, 0x01	; 1
 60a:	81 f0       	breq	.+32     	; 0x62c <__fixunssfsi+0x46>
 60c:	77 d0       	rcall	.+238    	; 0x6fc <__fp_zero>
 60e:	b1 e0       	ldi	r27, 0x01	; 1
 610:	08 95       	ret
 612:	74 c0       	rjmp	.+232    	; 0x6fc <__fp_zero>
 614:	67 2f       	mov	r22, r23
 616:	78 2f       	mov	r23, r24
 618:	88 27       	eor	r24, r24
 61a:	b8 5f       	subi	r27, 0xF8	; 248
 61c:	39 f0       	breq	.+14     	; 0x62c <__fixunssfsi+0x46>
 61e:	b9 3f       	cpi	r27, 0xF9	; 249
 620:	cc f3       	brlt	.-14     	; 0x614 <__fixunssfsi+0x2e>
 622:	86 95       	lsr	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b3 95       	inc	r27
 62a:	d9 f7       	brne	.-10     	; 0x622 <__fixunssfsi+0x3c>
 62c:	3e f4       	brtc	.+14     	; 0x63c <__fixunssfsi+0x56>
 62e:	90 95       	com	r25
 630:	80 95       	com	r24
 632:	70 95       	com	r23
 634:	61 95       	neg	r22
 636:	7f 4f       	sbci	r23, 0xFF	; 255
 638:	8f 4f       	sbci	r24, 0xFF	; 255
 63a:	9f 4f       	sbci	r25, 0xFF	; 255
 63c:	08 95       	ret

0000063e <__floatunsisf>:
 63e:	e8 94       	clt
 640:	09 c0       	rjmp	.+18     	; 0x654 <__floatsisf+0x12>

00000642 <__floatsisf>:
 642:	97 fb       	bst	r25, 7
 644:	3e f4       	brtc	.+14     	; 0x654 <__floatsisf+0x12>
 646:	90 95       	com	r25
 648:	80 95       	com	r24
 64a:	70 95       	com	r23
 64c:	61 95       	neg	r22
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	99 23       	and	r25, r25
 656:	a9 f0       	breq	.+42     	; 0x682 <__floatsisf+0x40>
 658:	f9 2f       	mov	r31, r25
 65a:	96 e9       	ldi	r25, 0x96	; 150
 65c:	bb 27       	eor	r27, r27
 65e:	93 95       	inc	r25
 660:	f6 95       	lsr	r31
 662:	87 95       	ror	r24
 664:	77 95       	ror	r23
 666:	67 95       	ror	r22
 668:	b7 95       	ror	r27
 66a:	f1 11       	cpse	r31, r1
 66c:	f8 cf       	rjmp	.-16     	; 0x65e <__floatsisf+0x1c>
 66e:	fa f4       	brpl	.+62     	; 0x6ae <__floatsisf+0x6c>
 670:	bb 0f       	add	r27, r27
 672:	11 f4       	brne	.+4      	; 0x678 <__floatsisf+0x36>
 674:	60 ff       	sbrs	r22, 0
 676:	1b c0       	rjmp	.+54     	; 0x6ae <__floatsisf+0x6c>
 678:	6f 5f       	subi	r22, 0xFF	; 255
 67a:	7f 4f       	sbci	r23, 0xFF	; 255
 67c:	8f 4f       	sbci	r24, 0xFF	; 255
 67e:	9f 4f       	sbci	r25, 0xFF	; 255
 680:	16 c0       	rjmp	.+44     	; 0x6ae <__floatsisf+0x6c>
 682:	88 23       	and	r24, r24
 684:	11 f0       	breq	.+4      	; 0x68a <__floatsisf+0x48>
 686:	96 e9       	ldi	r25, 0x96	; 150
 688:	11 c0       	rjmp	.+34     	; 0x6ac <__floatsisf+0x6a>
 68a:	77 23       	and	r23, r23
 68c:	21 f0       	breq	.+8      	; 0x696 <__floatsisf+0x54>
 68e:	9e e8       	ldi	r25, 0x8E	; 142
 690:	87 2f       	mov	r24, r23
 692:	76 2f       	mov	r23, r22
 694:	05 c0       	rjmp	.+10     	; 0x6a0 <__floatsisf+0x5e>
 696:	66 23       	and	r22, r22
 698:	71 f0       	breq	.+28     	; 0x6b6 <__floatsisf+0x74>
 69a:	96 e8       	ldi	r25, 0x86	; 134
 69c:	86 2f       	mov	r24, r22
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	60 e0       	ldi	r22, 0x00	; 0
 6a2:	2a f0       	brmi	.+10     	; 0x6ae <__floatsisf+0x6c>
 6a4:	9a 95       	dec	r25
 6a6:	66 0f       	add	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	88 1f       	adc	r24, r24
 6ac:	da f7       	brpl	.-10     	; 0x6a4 <__floatsisf+0x62>
 6ae:	88 0f       	add	r24, r24
 6b0:	96 95       	lsr	r25
 6b2:	87 95       	ror	r24
 6b4:	97 f9       	bld	r25, 7
 6b6:	08 95       	ret

000006b8 <__fp_split3>:
 6b8:	57 fd       	sbrc	r21, 7
 6ba:	90 58       	subi	r25, 0x80	; 128
 6bc:	44 0f       	add	r20, r20
 6be:	55 1f       	adc	r21, r21
 6c0:	59 f0       	breq	.+22     	; 0x6d8 <__fp_splitA+0x10>
 6c2:	5f 3f       	cpi	r21, 0xFF	; 255
 6c4:	71 f0       	breq	.+28     	; 0x6e2 <__fp_splitA+0x1a>
 6c6:	47 95       	ror	r20

000006c8 <__fp_splitA>:
 6c8:	88 0f       	add	r24, r24
 6ca:	97 fb       	bst	r25, 7
 6cc:	99 1f       	adc	r25, r25
 6ce:	61 f0       	breq	.+24     	; 0x6e8 <__fp_splitA+0x20>
 6d0:	9f 3f       	cpi	r25, 0xFF	; 255
 6d2:	79 f0       	breq	.+30     	; 0x6f2 <__fp_splitA+0x2a>
 6d4:	87 95       	ror	r24
 6d6:	08 95       	ret
 6d8:	12 16       	cp	r1, r18
 6da:	13 06       	cpc	r1, r19
 6dc:	14 06       	cpc	r1, r20
 6de:	55 1f       	adc	r21, r21
 6e0:	f2 cf       	rjmp	.-28     	; 0x6c6 <__fp_split3+0xe>
 6e2:	46 95       	lsr	r20
 6e4:	f1 df       	rcall	.-30     	; 0x6c8 <__fp_splitA>
 6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <__fp_splitA+0x30>
 6e8:	16 16       	cp	r1, r22
 6ea:	17 06       	cpc	r1, r23
 6ec:	18 06       	cpc	r1, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	f1 cf       	rjmp	.-30     	; 0x6d4 <__fp_splitA+0xc>
 6f2:	86 95       	lsr	r24
 6f4:	71 05       	cpc	r23, r1
 6f6:	61 05       	cpc	r22, r1
 6f8:	08 94       	sec
 6fa:	08 95       	ret

000006fc <__fp_zero>:
 6fc:	e8 94       	clt

000006fe <__fp_szero>:
 6fe:	bb 27       	eor	r27, r27
 700:	66 27       	eor	r22, r22
 702:	77 27       	eor	r23, r23
 704:	cb 01       	movw	r24, r22
 706:	97 f9       	bld	r25, 7
 708:	08 95       	ret

0000070a <__mulsf3>:
 70a:	0b d0       	rcall	.+22     	; 0x722 <__mulsf3x>
 70c:	78 c0       	rjmp	.+240    	; 0x7fe <__fp_round>
 70e:	69 d0       	rcall	.+210    	; 0x7e2 <__fp_pscA>
 710:	28 f0       	brcs	.+10     	; 0x71c <__mulsf3+0x12>
 712:	6e d0       	rcall	.+220    	; 0x7f0 <__fp_pscB>
 714:	18 f0       	brcs	.+6      	; 0x71c <__mulsf3+0x12>
 716:	95 23       	and	r25, r21
 718:	09 f0       	breq	.+2      	; 0x71c <__mulsf3+0x12>
 71a:	5a c0       	rjmp	.+180    	; 0x7d0 <__fp_inf>
 71c:	5f c0       	rjmp	.+190    	; 0x7dc <__fp_nan>
 71e:	11 24       	eor	r1, r1
 720:	ee cf       	rjmp	.-36     	; 0x6fe <__fp_szero>

00000722 <__mulsf3x>:
 722:	ca df       	rcall	.-108    	; 0x6b8 <__fp_split3>
 724:	a0 f3       	brcs	.-24     	; 0x70e <__mulsf3+0x4>

00000726 <__mulsf3_pse>:
 726:	95 9f       	mul	r25, r21
 728:	d1 f3       	breq	.-12     	; 0x71e <__mulsf3+0x14>
 72a:	95 0f       	add	r25, r21
 72c:	50 e0       	ldi	r21, 0x00	; 0
 72e:	55 1f       	adc	r21, r21
 730:	62 9f       	mul	r22, r18
 732:	f0 01       	movw	r30, r0
 734:	72 9f       	mul	r23, r18
 736:	bb 27       	eor	r27, r27
 738:	f0 0d       	add	r31, r0
 73a:	b1 1d       	adc	r27, r1
 73c:	63 9f       	mul	r22, r19
 73e:	aa 27       	eor	r26, r26
 740:	f0 0d       	add	r31, r0
 742:	b1 1d       	adc	r27, r1
 744:	aa 1f       	adc	r26, r26
 746:	64 9f       	mul	r22, r20
 748:	66 27       	eor	r22, r22
 74a:	b0 0d       	add	r27, r0
 74c:	a1 1d       	adc	r26, r1
 74e:	66 1f       	adc	r22, r22
 750:	82 9f       	mul	r24, r18
 752:	22 27       	eor	r18, r18
 754:	b0 0d       	add	r27, r0
 756:	a1 1d       	adc	r26, r1
 758:	62 1f       	adc	r22, r18
 75a:	73 9f       	mul	r23, r19
 75c:	b0 0d       	add	r27, r0
 75e:	a1 1d       	adc	r26, r1
 760:	62 1f       	adc	r22, r18
 762:	83 9f       	mul	r24, r19
 764:	a0 0d       	add	r26, r0
 766:	61 1d       	adc	r22, r1
 768:	22 1f       	adc	r18, r18
 76a:	74 9f       	mul	r23, r20
 76c:	33 27       	eor	r19, r19
 76e:	a0 0d       	add	r26, r0
 770:	61 1d       	adc	r22, r1
 772:	23 1f       	adc	r18, r19
 774:	84 9f       	mul	r24, r20
 776:	60 0d       	add	r22, r0
 778:	21 1d       	adc	r18, r1
 77a:	82 2f       	mov	r24, r18
 77c:	76 2f       	mov	r23, r22
 77e:	6a 2f       	mov	r22, r26
 780:	11 24       	eor	r1, r1
 782:	9f 57       	subi	r25, 0x7F	; 127
 784:	50 40       	sbci	r21, 0x00	; 0
 786:	8a f0       	brmi	.+34     	; 0x7aa <__mulsf3_pse+0x84>
 788:	e1 f0       	breq	.+56     	; 0x7c2 <__mulsf3_pse+0x9c>
 78a:	88 23       	and	r24, r24
 78c:	4a f0       	brmi	.+18     	; 0x7a0 <__mulsf3_pse+0x7a>
 78e:	ee 0f       	add	r30, r30
 790:	ff 1f       	adc	r31, r31
 792:	bb 1f       	adc	r27, r27
 794:	66 1f       	adc	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	91 50       	subi	r25, 0x01	; 1
 79c:	50 40       	sbci	r21, 0x00	; 0
 79e:	a9 f7       	brne	.-22     	; 0x78a <__mulsf3_pse+0x64>
 7a0:	9e 3f       	cpi	r25, 0xFE	; 254
 7a2:	51 05       	cpc	r21, r1
 7a4:	70 f0       	brcs	.+28     	; 0x7c2 <__mulsf3_pse+0x9c>
 7a6:	14 c0       	rjmp	.+40     	; 0x7d0 <__fp_inf>
 7a8:	aa cf       	rjmp	.-172    	; 0x6fe <__fp_szero>
 7aa:	5f 3f       	cpi	r21, 0xFF	; 255
 7ac:	ec f3       	brlt	.-6      	; 0x7a8 <__mulsf3_pse+0x82>
 7ae:	98 3e       	cpi	r25, 0xE8	; 232
 7b0:	dc f3       	brlt	.-10     	; 0x7a8 <__mulsf3_pse+0x82>
 7b2:	86 95       	lsr	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b7 95       	ror	r27
 7ba:	f7 95       	ror	r31
 7bc:	e7 95       	ror	r30
 7be:	9f 5f       	subi	r25, 0xFF	; 255
 7c0:	c1 f7       	brne	.-16     	; 0x7b2 <__mulsf3_pse+0x8c>
 7c2:	fe 2b       	or	r31, r30
 7c4:	88 0f       	add	r24, r24
 7c6:	91 1d       	adc	r25, r1
 7c8:	96 95       	lsr	r25
 7ca:	87 95       	ror	r24
 7cc:	97 f9       	bld	r25, 7
 7ce:	08 95       	ret

000007d0 <__fp_inf>:
 7d0:	97 f9       	bld	r25, 7
 7d2:	9f 67       	ori	r25, 0x7F	; 127
 7d4:	80 e8       	ldi	r24, 0x80	; 128
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	08 95       	ret

000007dc <__fp_nan>:
 7dc:	9f ef       	ldi	r25, 0xFF	; 255
 7de:	80 ec       	ldi	r24, 0xC0	; 192
 7e0:	08 95       	ret

000007e2 <__fp_pscA>:
 7e2:	00 24       	eor	r0, r0
 7e4:	0a 94       	dec	r0
 7e6:	16 16       	cp	r1, r22
 7e8:	17 06       	cpc	r1, r23
 7ea:	18 06       	cpc	r1, r24
 7ec:	09 06       	cpc	r0, r25
 7ee:	08 95       	ret

000007f0 <__fp_pscB>:
 7f0:	00 24       	eor	r0, r0
 7f2:	0a 94       	dec	r0
 7f4:	12 16       	cp	r1, r18
 7f6:	13 06       	cpc	r1, r19
 7f8:	14 06       	cpc	r1, r20
 7fa:	05 06       	cpc	r0, r21
 7fc:	08 95       	ret

000007fe <__fp_round>:
 7fe:	09 2e       	mov	r0, r25
 800:	03 94       	inc	r0
 802:	00 0c       	add	r0, r0
 804:	11 f4       	brne	.+4      	; 0x80a <__fp_round+0xc>
 806:	88 23       	and	r24, r24
 808:	52 f0       	brmi	.+20     	; 0x81e <__fp_round+0x20>
 80a:	bb 0f       	add	r27, r27
 80c:	40 f4       	brcc	.+16     	; 0x81e <__fp_round+0x20>
 80e:	bf 2b       	or	r27, r31
 810:	11 f4       	brne	.+4      	; 0x816 <__fp_round+0x18>
 812:	60 ff       	sbrs	r22, 0
 814:	04 c0       	rjmp	.+8      	; 0x81e <__fp_round+0x20>
 816:	6f 5f       	subi	r22, 0xFF	; 255
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	8f 4f       	sbci	r24, 0xFF	; 255
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	08 95       	ret

00000820 <__umulhisi3>:
 820:	a2 9f       	mul	r26, r18
 822:	b0 01       	movw	r22, r0
 824:	b3 9f       	mul	r27, r19
 826:	c0 01       	movw	r24, r0
 828:	a3 9f       	mul	r26, r19
 82a:	70 0d       	add	r23, r0
 82c:	81 1d       	adc	r24, r1
 82e:	11 24       	eor	r1, r1
 830:	91 1d       	adc	r25, r1
 832:	b2 9f       	mul	r27, r18
 834:	70 0d       	add	r23, r0
 836:	81 1d       	adc	r24, r1
 838:	11 24       	eor	r1, r1
 83a:	91 1d       	adc	r25, r1
 83c:	08 95       	ret

0000083e <strcat>:
 83e:	fb 01       	movw	r30, r22
 840:	dc 01       	movw	r26, r24
 842:	0d 90       	ld	r0, X+
 844:	00 20       	and	r0, r0
 846:	e9 f7       	brne	.-6      	; 0x842 <strcat+0x4>
 848:	11 97       	sbiw	r26, 0x01	; 1
 84a:	01 90       	ld	r0, Z+
 84c:	0d 92       	st	X+, r0
 84e:	00 20       	and	r0, r0
 850:	e1 f7       	brne	.-8      	; 0x84a <strcat+0xc>
 852:	08 95       	ret

00000854 <itoa>:
 854:	45 32       	cpi	r20, 0x25	; 37
 856:	51 05       	cpc	r21, r1
 858:	18 f4       	brcc	.+6      	; 0x860 <itoa+0xc>
 85a:	42 30       	cpi	r20, 0x02	; 2
 85c:	08 f0       	brcs	.+2      	; 0x860 <itoa+0xc>
 85e:	04 c0       	rjmp	.+8      	; 0x868 <__itoa_ncheck>
 860:	fb 01       	movw	r30, r22
 862:	10 82       	st	Z, r1
 864:	cb 01       	movw	r24, r22
 866:	08 95       	ret

00000868 <__itoa_ncheck>:
 868:	bb 27       	eor	r27, r27
 86a:	4a 30       	cpi	r20, 0x0A	; 10
 86c:	31 f4       	brne	.+12     	; 0x87a <__itoa_ncheck+0x12>
 86e:	99 23       	and	r25, r25
 870:	22 f4       	brpl	.+8      	; 0x87a <__itoa_ncheck+0x12>
 872:	bd e2       	ldi	r27, 0x2D	; 45
 874:	90 95       	com	r25
 876:	81 95       	neg	r24
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	01 c0       	rjmp	.+2      	; 0x87e <__utoa_common>

0000087c <__utoa_ncheck>:
 87c:	bb 27       	eor	r27, r27

0000087e <__utoa_common>:
 87e:	fb 01       	movw	r30, r22
 880:	55 27       	eor	r21, r21
 882:	aa 27       	eor	r26, r26
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	aa 1f       	adc	r26, r26
 88a:	a4 17       	cp	r26, r20
 88c:	10 f0       	brcs	.+4      	; 0x892 <__utoa_common+0x14>
 88e:	a4 1b       	sub	r26, r20
 890:	83 95       	inc	r24
 892:	50 51       	subi	r21, 0x10	; 16
 894:	b9 f7       	brne	.-18     	; 0x884 <__utoa_common+0x6>
 896:	a0 5d       	subi	r26, 0xD0	; 208
 898:	aa 33       	cpi	r26, 0x3A	; 58
 89a:	08 f0       	brcs	.+2      	; 0x89e <__utoa_common+0x20>
 89c:	a9 5d       	subi	r26, 0xD9	; 217
 89e:	a1 93       	st	Z+, r26
 8a0:	00 97       	sbiw	r24, 0x00	; 0
 8a2:	79 f7       	brne	.-34     	; 0x882 <__utoa_common+0x4>
 8a4:	b1 11       	cpse	r27, r1
 8a6:	b1 93       	st	Z+, r27
 8a8:	11 92       	st	Z+, r1
 8aa:	cb 01       	movw	r24, r22
 8ac:	00 c0       	rjmp	.+0      	; 0x8ae <strrev>

000008ae <strrev>:
 8ae:	dc 01       	movw	r26, r24
 8b0:	fc 01       	movw	r30, r24
 8b2:	67 2f       	mov	r22, r23
 8b4:	71 91       	ld	r23, Z+
 8b6:	77 23       	and	r23, r23
 8b8:	e1 f7       	brne	.-8      	; 0x8b2 <strrev+0x4>
 8ba:	32 97       	sbiw	r30, 0x02	; 2
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <strrev+0x18>
 8be:	7c 91       	ld	r23, X
 8c0:	6d 93       	st	X+, r22
 8c2:	70 83       	st	Z, r23
 8c4:	62 91       	ld	r22, -Z
 8c6:	ae 17       	cp	r26, r30
 8c8:	bf 07       	cpc	r27, r31
 8ca:	c8 f3       	brcs	.-14     	; 0x8be <strrev+0x10>
 8cc:	08 95       	ret

000008ce <_exit>:
 8ce:	f8 94       	cli

000008d0 <__stop_program>:
 8d0:	ff cf       	rjmp	.-2      	; 0x8d0 <__stop_program>
