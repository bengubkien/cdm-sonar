
SONAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  000004d2  00000546  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001448  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dfd  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000784  00000000  00000000  00002899  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  00003020  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000067e  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000718  00000000  00000000  0000383a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003f52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ee c0       	rjmp	.+476    	; 0x26a <__vector_35>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	09 c1       	rjmp	.+530    	; 0x2b8 <__vector_41>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ed       	ldi	r30, 0xD2	; 210
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 31       	cpi	r26, 0x16	; 22
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	a9 d0       	rcall	.+338    	; 0x262 <main>
 110:	de c1       	rjmp	.+956    	; 0x4ce <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <lcd_write_8>:
  Inputs:     "info" es la información a enviar al registro del LCD.
  Outputs:    Ninguno.
*/
void lcd_write_8(uint8_t info)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // Asumo que el dato es '0'.
 114:	17 98       	cbi	0x02, 7	; 2
    if (info & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);        // Fuerzo que el dato sea '1' si es necesario.
 116:	88 23       	and	r24, r24
 118:	0c f4       	brge	.+2      	; 0x11c <lcd_write_8+0x8>
 11a:	17 9a       	sbi	0x02, 7	; 2

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // Repito para todos los otros bits.
 11c:	16 98       	cbi	0x02, 6	; 2
    if (info & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
 11e:	86 fd       	sbrc	r24, 6
 120:	16 9a       	sbi	0x02, 6	; 2

    lcd_D5_port &= ~(1<<lcd_D5_bit);
 122:	15 98       	cbi	0x02, 5	; 2
    if (info & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
 124:	85 fd       	sbrc	r24, 5
 126:	15 9a       	sbi	0x02, 5	; 2

    lcd_D4_port &= ~(1<<lcd_D4_bit);
 128:	14 98       	cbi	0x02, 4	; 2
    if (info & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
 12a:	84 fd       	sbrc	r24, 4
 12c:	14 9a       	sbi	0x02, 4	; 2

    lcd_D3_port &= ~(1<<lcd_D3_bit);
 12e:	13 98       	cbi	0x02, 3	; 2
    if (info & 1<<3) lcd_D3_port |= (1<<lcd_D3_bit);
 130:	83 fd       	sbrc	r24, 3
 132:	13 9a       	sbi	0x02, 3	; 2

    lcd_D2_port &= ~(1<<lcd_D2_bit);
 134:	12 98       	cbi	0x02, 2	; 2
    if (info & 1<<2) lcd_D2_port |= (1<<lcd_D2_bit);
 136:	82 fd       	sbrc	r24, 2
 138:	12 9a       	sbi	0x02, 2	; 2

    lcd_D1_port &= ~(1<<lcd_D1_bit);
 13a:	11 98       	cbi	0x02, 1	; 2
    if (info & 1<<1) lcd_D1_port |= (1<<lcd_D1_bit);
 13c:	81 fd       	sbrc	r24, 1
 13e:	11 9a       	sbi	0x02, 1	; 2

    lcd_D0_port &= ~(1<<lcd_D0_bit);
 140:	10 98       	cbi	0x02, 0	; 2
    if (info & 1<<0) lcd_D0_port |= (1<<lcd_D0_bit);
 142:	80 fd       	sbrc	r24, 0
 144:	10 9a       	sbi	0x02, 0	; 2

// Escribo los datos.
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
 146:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_write_8+0x36>
 14e:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
 150:	29 98       	cbi	0x05, 1	; 5
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_write_8+0x40>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <lcd_write_character_8d>:
  Outputs:    Ninguno.
*/

void lcd_write_character_8d(uint8_t datos)
{
    lcd_RS_port |= (1<<lcd_RS_bit);                 // Selecciono el registro de datos.
 15c:	28 9a       	sbi	0x05, 0	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Me aseguro que E esté en bajo.
 15e:	29 98       	cbi	0x05, 1	; 5
    lcd_write_8(datos);                             // Escribo los datos.
 160:	d9 cf       	rjmp	.-78     	; 0x114 <lcd_write_8>
 162:	08 95       	ret

00000164 <lcd_write_string_8d>:
  Inputs:     "texto" es el string que se representará en el display.
  Outputs:    Ninguno.
*/

void lcd_write_string_8d(uint8_t texto[])
{
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	1f 92       	push	r1
 16e:	1f 92       	push	r1
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	8c 01       	movw	r16, r24
    volatile int i = 0;                             
 176:	1a 82       	std	Y+2, r1	; 0x02
 178:	19 82       	std	Y+1, r1	; 0x01
    while (texto[i] != 0)
 17a:	e9 81       	ldd	r30, Y+1	; 0x01
 17c:	fa 81       	ldd	r31, Y+2	; 0x02
 17e:	e8 0f       	add	r30, r24
 180:	f9 1f       	adc	r31, r25
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	c1 f0       	breq	.+48     	; 0x1b8 <lcd_write_string_8d+0x54>
    {
        lcd_write_character_8d(texto[i]);
 188:	e9 81       	ldd	r30, Y+1	; 0x01
 18a:	fa 81       	ldd	r31, Y+2	; 0x02
 18c:	e0 0f       	add	r30, r16
 18e:	f1 1f       	adc	r31, r17
 190:	80 81       	ld	r24, Z
 192:	e4 df       	rcall	.-56     	; 0x15c <lcd_write_character_8d>
        i++;
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	9a 81       	ldd	r25, Y+2	; 0x02
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	9a 83       	std	Y+2, r25	; 0x02
 19c:	89 83       	std	Y+1, r24	; 0x01
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_write_string_8d+0x3e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_write_string_8d+0x44>
 1a8:	00 00       	nop
*/

void lcd_write_string_8d(uint8_t texto[])
{
    volatile int i = 0;                             
    while (texto[i] != 0)
 1aa:	e9 81       	ldd	r30, Y+1	; 0x01
 1ac:	fa 81       	ldd	r31, Y+2	; 0x02
 1ae:	e0 0f       	add	r30, r16
 1b0:	f1 1f       	adc	r31, r17
 1b2:	80 81       	ld	r24, Z
 1b4:	81 11       	cpse	r24, r1
 1b6:	e8 cf       	rjmp	.-48     	; 0x188 <lcd_write_string_8d+0x24>
    {
        lcd_write_character_8d(texto[i]);
        i++;
        _delay_us(80);                              // Delay de 40us.
    }
}
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	08 95       	ret

000001c6 <lcd_write_instruction_8d>:
  Outputs:    Ninguno.
*/

void lcd_write_instruction_8d(uint8_t instrucciones)
{
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // Selecciono el registro de instrucciones.
 1c6:	28 98       	cbi	0x05, 0	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Me aseguro que E esté en bajo.
 1c8:	29 98       	cbi	0x05, 1	; 5
    lcd_write_8(instrucciones);                     // Escribo las instrucciones.
 1ca:	a4 cf       	rjmp	.-184    	; 0x114 <lcd_write_8>
 1cc:	08 95       	ret

000001ce <lcd_init_8d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	81 ee       	ldi	r24, 0xE1	; 225
 1d2:	94 e0       	ldi	r25, 0x04	; 4
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <lcd_init_8d+0x6>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init_8d+0x10>
 1de:	00 00       	nop
{
// Delay de encendido.
    _delay_ms(100);                                 // 40ms.

// Reset del controlador del display LCD.
    lcd_write_instruction_8d(lcd_functionreset);    // Primera parte de la secuencia de reset.
 1e0:	80 e3       	ldi	r24, 0x30	; 48
 1e2:	f1 df       	rcall	.-30     	; 0x1c6 <lcd_write_instruction_8d>
 1e4:	8f e3       	ldi	r24, 0x3F	; 63
 1e6:	9c e9       	ldi	r25, 0x9C	; 156
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init_8d+0x1a>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_init_8d+0x20>
 1ee:	00 00       	nop
    _delay_ms(10);                                  // Delay de 4.1ms.

    lcd_write_instruction_8d(lcd_functionreset);    // Segunda parte de la secuencia de reset.
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	e9 df       	rcall	.-46     	; 0x1c6 <lcd_write_instruction_8d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	8f e1       	ldi	r24, 0x1F	; 31
 1f6:	93 e0       	ldi	r25, 0x03	; 3
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_init_8d+0x2a>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcd_init_8d+0x30>
    _delay_us(200);                                 // Delay de 100us.

    lcd_write_instruction_8d(lcd_functionreset);    // Tercera parte de la secuencia de reset.
 1fe:	00 00       	nop
 200:	80 e3       	ldi	r24, 0x30	; 48
 202:	e1 df       	rcall	.-62     	; 0x1c6 <lcd_write_instruction_8d>
 204:	8f e1       	ldi	r24, 0x1F	; 31
 206:	93 e0       	ldi	r25, 0x03	; 3
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_init_8d+0x3a>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <lcd_init_8d+0x40>
    _delay_us(200);                                

// Configuración del display LED.
    lcd_write_instruction_8d(lcd_functionreset);    // Seteo el modo, la cantidad de líneas y font.
 20e:	00 00       	nop
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	d9 df       	rcall	.-78     	; 0x1c6 <lcd_write_instruction_8d>
 214:	8f e3       	ldi	r24, 0x3F	; 63
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init_8d+0x4a>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_init_8d+0x50>
    _delay_us(80);                                  // Delay de 40us.

// Rutina de inicialización (chequear después).

    lcd_write_instruction_8d(lcd_displayoff);       // Apago el display.
 21e:	00 00       	nop
 220:	88 e0       	ldi	r24, 0x08	; 8
 222:	d1 df       	rcall	.-94     	; 0x1c6 <lcd_write_instruction_8d>
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init_8d+0x5a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_init_8d+0x60>
    _delay_us(80);                                  // Delay de 40us.

    lcd_write_instruction_8d(lcd_clear);            // Limpio la RAM del display.
 22e:	00 00       	nop
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	c9 df       	rcall	.-110    	; 0x1c6 <lcd_write_instruction_8d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	8f e7       	ldi	r24, 0x7F	; 127
 236:	9e e3       	ldi	r25, 0x3E	; 62
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_init_8d+0x6a>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_init_8d+0x70>
    _delay_ms(4);                                   // Delay de 1.64ms.

    lcd_write_instruction_8d(lcd_entrymode);        // Seteo el comportamiento del cursor.
 23e:	00 00       	nop
 240:	86 e0       	ldi	r24, 0x06	; 6
 242:	c1 df       	rcall	.-126    	; 0x1c6 <lcd_write_instruction_8d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_init_8d+0x7a>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_init_8d+0x80>
    _delay_us(80);                                  // Delay de 40us.

    lcd_write_instruction_8d(lcd_displayon);        // Prendo el display.
 24e:	00 00       	nop
 250:	8c e0       	ldi	r24, 0x0C	; 12
 252:	b9 df       	rcall	.-142    	; 0x1c6 <lcd_write_instruction_8d>
 254:	8f e3       	ldi	r24, 0x3F	; 63
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_init_8d+0x8a>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_init_8d+0x90>
 25e:	00 00       	nop
 260:	08 95       	ret

00000262 <main>:
#include <util/delay.h>

// Comienzo del main
int main(void)
{
	sonar_setup();
 262:	98 d0       	rcall	.+304    	; 0x394 <sonar_setup>
	lcd_init_8d();
 264:	b4 df       	rcall	.-152    	; 0x1ce <lcd_init_8d>
	while (1)
	{
		servo_rotation();
 266:	d6 d0       	rcall	.+428    	; 0x414 <servo_rotation>
 268:	fe cf       	rjmp	.-4      	; 0x266 <main+0x4>

0000026a <__vector_35>:
 26a:	1f 92       	push	r1
  Nombre:	TIMER3_OVF_vect
  Fuente:	Flag de overflow del timer 3	
  Propósito:	Mandar un nuevo pulso al sensor luego de pasar un cierto tiempo (200 ms en este caso)
*/

ISR(TIMER3_OVF_vect){					// Vector de interrupcion del overflow del timer 3
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	0b b6       	in	r0, 0x3b	; 59
 276:	0f 92       	push	r0
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	trigger_pulse();
 290:	fe d0       	rcall	.+508    	; 0x48e <trigger_pulse>
}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	7f 91       	pop	r23
 2a0:	6f 91       	pop	r22
 2a2:	5f 91       	pop	r21
 2a4:	4f 91       	pop	r20
 2a6:	3f 91       	pop	r19
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0b be       	out	0x3b, r0	; 59
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <__vector_41>:
  Propósito:	Medir el tiempo en us desde que se mando el pulso hasta que retorno el sensor por echo (Valor de ICR4/2),
  		obtener la distancia a partir del valor de tiempo, y escribir esto y el angulo en el display
*/

ISR(TIMER4_CAPT_vect)					// Vector de interrupción de input capture para el Timer 4.
{
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	0b b6       	in	r0, 0x3b	; 59
 2c4:	0f 92       	push	r0
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	65 97       	sbiw	r28, 0x15	; 21
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	cd bf       	out	0x3d, r28	; 61
	TCCR4B |= (0<<CS41);				// Freno el timer.
 2f0:	e1 ea       	ldi	r30, 0xA1	; 161
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	80 83       	st	Z, r24
	int dist_cm = ICR4 / (2*58);			// Una cuenta de 2 equivale a 1 us con 8 de prescaler. La cuenta para la distancia en cm es t_us/58 = dist_cm  ==>  count/(2*58) = dist_cm.
 2f8:	e6 ea       	ldi	r30, 0xA6	; 166
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	00 81       	ld	r16, Z
 2fe:	11 81       	ldd	r17, Z+1	; 0x01
	ICR4 = 0;					// Limpio los registros contadores.
 300:	11 82       	std	Z+1, r1	; 0x01
 302:	10 82       	st	Z, r1
	TCNT4 = 0;
 304:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 308:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
	int angulo = (int) (OCR1A - t_0grados)*0.0878;	// Obtengo el angulo (lo paso a int es vez de usar floor(), para no usar math.h)
 30c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 310:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	unsigned char string_angulo[9] = "Angulo: ";	
 314:	89 e0       	ldi	r24, 0x09	; 9
 316:	e0 e0       	ldi	r30, 0x00	; 0
 318:	f2 e0       	ldi	r31, 0x02	; 2
 31a:	de 01       	movw	r26, r28
 31c:	11 96       	adiw	r26, 0x01	; 1
 31e:	01 90       	ld	r0, Z+
 320:	0d 92       	st	X+, r0
 322:	8a 95       	dec	r24
 324:	e1 f7       	brne	.-8      	; 0x31e <__vector_41+0x66>
	//strcat(string_angulo, str(angulo))							// Concateno el string y el ángulo.
	lcd_write_string_8d(string_angulo);						// Escribo el angulo en el display.
 326:	ce 01       	movw	r24, r28
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	1c df       	rcall	.-456    	; 0x164 <lcd_write_string_8d>
	
	if(dist_cm<150) {											// Si el objeto se encuentra a una distancia aceptable...	
 32c:	98 01       	movw	r18, r16
 32e:	af e9       	ldi	r26, 0x9F	; 159
 330:	b6 e4       	ldi	r27, 0x46	; 70
 332:	be d0       	rcall	.+380    	; 0x4b0 <__umulhisi3>
 334:	80 3c       	cpi	r24, 0xC0	; 192
 336:	92 41       	sbci	r25, 0x12	; 18
 338:	80 f4       	brcc	.+32     	; 0x35a <__vector_41+0xa2>
		unsigned char string_dist[12] = "Distancia: ";				    // Defino el string para el display.
 33a:	8c e0       	ldi	r24, 0x0C	; 12
 33c:	e9 e0       	ldi	r30, 0x09	; 9
 33e:	f2 e0       	ldi	r31, 0x02	; 2
 340:	de 01       	movw	r26, r28
 342:	1a 96       	adiw	r26, 0x0a	; 10
 344:	01 90       	ld	r0, Z+
 346:	0d 92       	st	X+, r0
 348:	8a 95       	dec	r24
		lcd_write_instruction_8d(lcd_setcursor | lcd_line_two);	// Muevo el cursor a la segunda línea.
 34a:	e1 f7       	brne	.-8      	; 0x344 <__vector_41+0x8c>
 34c:	80 ec       	ldi	r24, 0xC0	; 192
		//strcat(string_dist, dist_cm)						
		lcd_write_string_8d(string_dist);				// Escribo la distancia.
 34e:	3b df       	rcall	.-394    	; 0x1c6 <lcd_write_instruction_8d>
 350:	ce 01       	movw	r24, r28
 352:	0a 96       	adiw	r24, 0x0a	; 10
		lcd_write_instruction_8d(lcd_setcursor | lcd_line_one);  // Muevo el cursor de vuelta a la primer línea.
 354:	07 df       	rcall	.-498    	; 0x164 <lcd_write_string_8d>
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	36 df       	rcall	.-404    	; 0x1c6 <lcd_write_instruction_8d>
	}
 35a:	65 96       	adiw	r28, 0x15	; 21
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	f8 94       	cli
 360:	de bf       	out	0x3e, r29	; 62
 362:	0f be       	out	0x3f, r0	; 63
 364:	cd bf       	out	0x3d, r28	; 61
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	7f 91       	pop	r23
 378:	6f 91       	pop	r22
 37a:	5f 91       	pop	r21
 37c:	4f 91       	pop	r20
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	0f 90       	pop	r0
 388:	0b be       	out	0x3b, r0	; 59
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <sonar_setup>:
  Outputs:    Ninguno.
*/

void sonar_setup(void){
	// Timer 1 para la onda PWM PFC del servo
	TCCR1A |= (1 << COM1A1);						// Limpio OC1A para upcounting en compare match y seteo 0C1A para downcounting en compare match
 394:	e0 e8       	ldi	r30, 0x80	; 128
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	80 68       	ori	r24, 0x80	; 128
 39c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << CS11);					// WGM1 3:0 (bits 3 y 2 en TCCR1B y 1 y 0 en TCCR1A) en 0b1000 para modo PFCPWM con TOP = ICR1, y prescaler en 8
 39e:	e1 e8       	ldi	r30, 0x81	; 129
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	82 61       	ori	r24, 0x12	; 18
 3a6:	80 83       	st	Z, r24
	DDRB |= (1 << DDB5);							// Port B5 (Pin 11, OC1A) como salida
 3a8:	25 9a       	sbi	0x04, 5	; 4
	ICR1 = 20000;								// 20 ms de periodo PWM
 3aa:	80 e2       	ldi	r24, 0x20	; 32
 3ac:	9e e4       	ldi	r25, 0x4E	; 78
 3ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 3b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	
	// Timer 3 para contar tiempo entre pulsos
	TCCR3A |= (1 << WGM31);								// Modo fast PWM con overflow en el valor de ICR3
 3b6:	e0 e9       	ldi	r30, 0x90	; 144
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	82 60       	ori	r24, 0x02	; 2
 3be:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM33) | (1 << WGM32) | (1 << CS31) | (1 << CS30);		// 64 de prescaler
 3c0:	e1 e9       	ldi	r30, 0x91	; 145
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	8b 61       	ori	r24, 0x1B	; 27
 3c8:	80 83       	st	Z, r24
	TIMSK3 |= (1 << TOIE3);								// Activo el interrupt por overflow
 3ca:	e1 e7       	ldi	r30, 0x71	; 113
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	81 60       	ori	r24, 0x01	; 1
 3d2:	80 83       	st	Z, r24
	ICR3 = 50000;									// Seteo el TOP para que el overflow se de a los 200 ms
 3d4:	80 e5       	ldi	r24, 0x50	; 80
 3d6:	93 ec       	ldi	r25, 0xC3	; 195
 3d8:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 3dc:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
	
	// Timer 4 para medir el tiempo entre el pulso de salida y el que devuelve el sensor
	TCCR4B |= (1 << ICES4);								// Seteo que la interrupción se dé en flanco de subida y un prescaler de 8.
 3e0:	e1 ea       	ldi	r30, 0xA1	; 161
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	80 64       	ori	r24, 0x40	; 64
 3e8:	80 83       	st	Z, r24
	TIMSK4 |= (1 << ICIE4);
 3ea:	e2 e7       	ldi	r30, 0x72	; 114
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	80 62       	ori	r24, 0x20	; 32
 3f2:	80 83       	st	Z, r24
	DDRL |= (1 << PL1);								// Seteo el PortL 1 como salida para el pulso del sensor (Pin 48) y el 0 como entrada para el echo (Pin 49)
 3f4:	ea e0       	ldi	r30, 0x0A	; 10
 3f6:	f1 e0       	ldi	r31, 0x01	; 1
 3f8:	80 81       	ld	r24, Z
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	80 83       	st	Z, r24
	
	// Modos de bajo consumo (PRR0 y PRR1)
	PRR0 |= (1 << PRTWI) | (1 << PRSPI) | (1 << PRUSART0) | (1 << PRADC);		// Desactivo TWI (Two wire interface), SPI, el ADC y los USART
 3fe:	e4 e6       	ldi	r30, 0x64	; 100
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	87 68       	ori	r24, 0x87	; 135
 406:	80 83       	st	Z, r24
	PRR1 |= (1 << PRUSART3) | (1 << PRUSART2) | (1 << PRUSART1);
 408:	e5 e6       	ldi	r30, 0x65	; 101
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	87 60       	ori	r24, 0x07	; 7
 410:	80 83       	st	Z, r24
 412:	08 95       	ret

00000414 <servo_rotation>:
  Inputs:     Ninguno.
  Outputs:    Ninguno.
*/

void servo_rotation(void){
	for( OCR1A = t_0grados; OCR1A <= t_180grados; OCR1A = OCR1A + t_paso){
 414:	e8 e8       	ldi	r30, 0x88	; 136
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	8e e5       	ldi	r24, 0x5E	; 94
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	91 83       	std	Z+1, r25	; 0x01
 41e:	80 83       	st	Z, r24
 420:	80 81       	ld	r24, Z
 422:	91 81       	ldd	r25, Z+1	; 0x01
 424:	81 36       	cpi	r24, 0x61	; 97
 426:	99 40       	sbci	r25, 0x09	; 9
 428:	98 f4       	brcc	.+38     	; 0x450 <servo_rotation+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	90 e7       	ldi	r25, 0x70	; 112
 42e:	22 e0       	ldi	r18, 0x02	; 2
 430:	81 50       	subi	r24, 0x01	; 1
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	20 40       	sbci	r18, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <servo_rotation+0x1c>
 438:	00 c0       	rjmp	.+0      	; 0x43a <servo_rotation+0x26>
 43a:	00 00       	nop
 43c:	80 81       	ld	r24, Z
 43e:	91 81       	ldd	r25, Z+1	; 0x01
 440:	0a 96       	adiw	r24, 0x0a	; 10
 442:	91 83       	std	Z+1, r25	; 0x01
 444:	80 83       	st	Z, r24
 446:	80 81       	ld	r24, Z
 448:	91 81       	ldd	r25, Z+1	; 0x01
 44a:	81 36       	cpi	r24, 0x61	; 97
 44c:	99 40       	sbci	r25, 0x09	; 9
 44e:	68 f3       	brcs	.-38     	; 0x42a <servo_rotation+0x16>
		_delay_ms(ms_servo);
	}
	for( OCR1A = t_180grados; OCR1A >= t_0grados; OCR1A = OCR1A - t_paso){
 450:	e8 e8       	ldi	r30, 0x88	; 136
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 e6       	ldi	r24, 0x60	; 96
 456:	99 e0       	ldi	r25, 0x09	; 9
 458:	91 83       	std	Z+1, r25	; 0x01
 45a:	80 83       	st	Z, r24
 45c:	80 81       	ld	r24, Z
 45e:	91 81       	ldd	r25, Z+1	; 0x01
 460:	8e 35       	cpi	r24, 0x5E	; 94
 462:	91 40       	sbci	r25, 0x01	; 1
 464:	98 f0       	brcs	.+38     	; 0x48c <servo_rotation+0x78>
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	90 e7       	ldi	r25, 0x70	; 112
 46a:	22 e0       	ldi	r18, 0x02	; 2
 46c:	81 50       	subi	r24, 0x01	; 1
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	20 40       	sbci	r18, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <servo_rotation+0x58>
 474:	00 c0       	rjmp	.+0      	; 0x476 <servo_rotation+0x62>
 476:	00 00       	nop
 478:	80 81       	ld	r24, Z
 47a:	91 81       	ldd	r25, Z+1	; 0x01
 47c:	0a 97       	sbiw	r24, 0x0a	; 10
 47e:	91 83       	std	Z+1, r25	; 0x01
 480:	80 83       	st	Z, r24
 482:	80 81       	ld	r24, Z
 484:	91 81       	ldd	r25, Z+1	; 0x01
 486:	8e 35       	cpi	r24, 0x5E	; 94
 488:	91 40       	sbci	r25, 0x01	; 1
 48a:	68 f7       	brcc	.-38     	; 0x466 <servo_rotation+0x52>
 48c:	08 95       	ret

0000048e <trigger_pulse>:
  Inputs:     Ninguno.
  Outputs:    Ninguno.
*/

void trigger_pulse(void){
	TCCR4B |= (1<<CS41);				// Comienzo el conteo con prescaler en 8.
 48e:	e1 ea       	ldi	r30, 0xA1	; 161
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	82 60       	ori	r24, 0x02	; 2
 496:	80 83       	st	Z, r24
	
	PORTL |= (1 << PL1);				// Envio el pulso de 10us al sensor.
 498:	eb e0       	ldi	r30, 0x0B	; 11
 49a:	f1 e0       	ldi	r31, 0x01	; 1
 49c:	80 81       	ld	r24, Z
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a2:	85 e3       	ldi	r24, 0x35	; 53
 4a4:	8a 95       	dec	r24
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <trigger_pulse+0x16>
 4a8:	00 00       	nop
	_delay_us(10);
	PORTL |= (0 << PL1);
 4aa:	80 81       	ld	r24, Z
 4ac:	80 83       	st	Z, r24
 4ae:	08 95       	ret

000004b0 <__umulhisi3>:
 4b0:	a2 9f       	mul	r26, r18
 4b2:	b0 01       	movw	r22, r0
 4b4:	b3 9f       	mul	r27, r19
 4b6:	c0 01       	movw	r24, r0
 4b8:	a3 9f       	mul	r26, r19
 4ba:	70 0d       	add	r23, r0
 4bc:	81 1d       	adc	r24, r1
 4be:	11 24       	eor	r1, r1
 4c0:	91 1d       	adc	r25, r1
 4c2:	b2 9f       	mul	r27, r18
 4c4:	70 0d       	add	r23, r0
 4c6:	81 1d       	adc	r24, r1
 4c8:	11 24       	eor	r1, r1
 4ca:	91 1d       	adc	r25, r1
 4cc:	08 95       	ret

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
